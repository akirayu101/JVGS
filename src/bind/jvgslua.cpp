/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_BoundingBox swig_types[0]
#define SWIGTYPE_p_Color swig_types[1]
#define SWIGTYPE_p_Entity swig_types[2]
#define SWIGTYPE_p_GLuint swig_types[3]
#define SWIGTYPE_p_Key swig_types[4]
#define SWIGTYPE_p_Line swig_types[5]
#define SWIGTYPE_p_List swig_types[6]
#define SWIGTYPE_p_Parser swig_types[7]
#define SWIGTYPE_p_PathDataParser swig_types[8]
#define SWIGTYPE_p_SketchElement swig_types[9]
#define SWIGTYPE_p_SketchElementType swig_types[10]
#define SWIGTYPE_p_TiXmlElement swig_types[11]
#define SWIGTYPE_p_Vector2D swig_types[12]
#define SWIGTYPE_p_float swig_types[13]
#define SWIGTYPE_p_jvgs__core__LogManager swig_types[14]
#define SWIGTYPE_p_jvgs__game__Affector swig_types[15]
#define SWIGTYPE_p_jvgs__game__CollisionResponseAffector swig_types[16]
#define SWIGTYPE_p_jvgs__game__Entity swig_types[17]
#define SWIGTYPE_p_jvgs__game__GravityAffector swig_types[18]
#define SWIGTYPE_p_jvgs__game__InputAffector swig_types[19]
#define SWIGTYPE_p_jvgs__input__InputManager swig_types[20]
#define SWIGTYPE_p_jvgs__input__KeyListener swig_types[21]
#define SWIGTYPE_p_jvgs__math__AffineTransformationMatrix swig_types[22]
#define SWIGTYPE_p_jvgs__math__BoundingBox swig_types[23]
#define SWIGTYPE_p_jvgs__math__CubicCurve swig_types[24]
#define SWIGTYPE_p_jvgs__math__Line swig_types[25]
#define SWIGTYPE_p_jvgs__math__LineSegment swig_types[26]
#define SWIGTYPE_p_jvgs__math__MathManager swig_types[27]
#define SWIGTYPE_p_jvgs__math__Matrix swig_types[28]
#define SWIGTYPE_p_jvgs__math__Noise swig_types[29]
#define SWIGTYPE_p_jvgs__math__PathSegment swig_types[30]
#define SWIGTYPE_p_jvgs__math__SegmentQuadTree swig_types[31]
#define SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode swig_types[32]
#define SWIGTYPE_p_jvgs__math__Vector2D swig_types[33]
#define SWIGTYPE_p_jvgs__sketch__CPathCommandParser swig_types[34]
#define SWIGTYPE_p_jvgs__sketch__Group swig_types[35]
#define SWIGTYPE_p_jvgs__sketch__GroupParser swig_types[36]
#define SWIGTYPE_p_jvgs__sketch__LPathCommandParser swig_types[37]
#define SWIGTYPE_p_jvgs__sketch__MPathCommandParser swig_types[38]
#define SWIGTYPE_p_jvgs__sketch__MatrixTransformCommand swig_types[39]
#define SWIGTYPE_p_jvgs__sketch__Parser swig_types[40]
#define SWIGTYPE_p_jvgs__sketch__Path swig_types[41]
#define SWIGTYPE_p_jvgs__sketch__PathCommandParser swig_types[42]
#define SWIGTYPE_p_jvgs__sketch__PathComponent swig_types[43]
#define SWIGTYPE_p_jvgs__sketch__PathDataParser swig_types[44]
#define SWIGTYPE_p_jvgs__sketch__PathParser swig_types[45]
#define SWIGTYPE_p_jvgs__sketch__RotateTransformCommand swig_types[46]
#define SWIGTYPE_p_jvgs__sketch__SPathCommandParser swig_types[47]
#define SWIGTYPE_p_jvgs__sketch__ScaleTransformCommand swig_types[48]
#define SWIGTYPE_p_jvgs__sketch__Sketch swig_types[49]
#define SWIGTYPE_p_jvgs__sketch__SketchElement swig_types[50]
#define SWIGTYPE_p_jvgs__sketch__SketchElementParser swig_types[51]
#define SWIGTYPE_p_jvgs__sketch__SketchElementRenderer swig_types[52]
#define SWIGTYPE_p_jvgs__sketch__SkewXTransformCommand swig_types[53]
#define SWIGTYPE_p_jvgs__sketch__SkewYTransformCommand swig_types[54]
#define SWIGTYPE_p_jvgs__sketch__TextParser swig_types[55]
#define SWIGTYPE_p_jvgs__sketch__TransformCommand swig_types[56]
#define SWIGTYPE_p_jvgs__sketch__TransformParser swig_types[57]
#define SWIGTYPE_p_jvgs__sketch__TranslateTransformCommand swig_types[58]
#define SWIGTYPE_p_jvgs__sketch__ZPathCommandParser swig_types[59]
#define SWIGTYPE_p_jvgs__video__Color swig_types[60]
#define SWIGTYPE_p_jvgs__video__ListManager swig_types[61]
#define SWIGTYPE_p_jvgs__video__Renderer swig_types[62]
#define SWIGTYPE_p_jvgs__video__VideoManager swig_types[63]
#define SWIGTYPE_p_math__AffineTransformationMatrix swig_types[64]
#define SWIGTYPE_p_math__LineSegment swig_types[65]
#define SWIGTYPE_p_math__Vector2D swig_types[66]
#define SWIGTYPE_p_sketch__Sketch swig_types[67]
#define SWIGTYPE_p_std__string swig_types[68]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[69]
#define SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t swig_types[70]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[71]
static swig_type_info *swig_types[73];
static swig_module_info swig_module = {swig_types, 72, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "jvgslua"
#define SWIG_init      luaopen_jvgslua
#define SWIG_init_user luaopen_jvgslua_user

#define SWIG_LUACODE   luaopen_jvgslua_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


	#include <string>


#include "../core/LogManager.h"
#include "../input/KeyListener.h"
#include "../input/Key.h"
#include "../input/InputManager.h"
#include "../game/GravityAffector.h"
#include "../game/Entity.h"
#include "../game/InputAffector.h"
#include "../game/Affector.h"
#include "../game/CollisionResponseAffector.h"
#include "../video/VideoManager.h"
#include "../video/Renderer.h"
#include "../video/Color.h"
#include "../video/ListManager.h"
#include "../math/PathSegment.h"
#include "../math/Vector2D.h"
#include "../math/Matrix.h"
#include "../math/Noise.h"
#include "../math/AffineTransformationMatrix.h"
#include "../math/SegmentQuadTree.h"
#include "../math/LineSegment.h"
#include "../math/MathManager.h"
#include "../math/Line.h"
#include "../math/SegmentQuadTreeNode.h"
#include "../math/BoundingBox.h"
#include "../math/CubicCurve.h"
#include "../sketch/GroupParser.h"
#include "../sketch/PathParser.h"
#include "../sketch/CPathCommandParser.h"
#include "../sketch/PathCommandParser.h"
#include "../sketch/PathComponent.h"
#include "../sketch/ScaleTransformCommand.h"
#include "../sketch/SketchElementRenderer.h"
#include "../sketch/SketchElementParser.h"
#include "../sketch/MPathCommandParser.h"
#include "../sketch/SkewXTransformCommand.h"
#include "../sketch/LPathCommandParser.h"
#include "../sketch/Group.h"
#include "../sketch/Path.h"
#include "../sketch/Parser.h"
#include "../sketch/Sketch.h"
#include "../sketch/PathDataParser.h"
#include "../sketch/SketchElement.h"
#include "../sketch/TextParser.h"
#include "../sketch/SkewYTransformCommand.h"
#include "../sketch/TranslateTransformCommand.h"
#include "../sketch/SPathCommandParser.h"
#include "../sketch/MatrixTransformCommand.h"
#include "../sketch/ZPathCommandParser.h"
#include "../sketch/TransformParser.h"
#include "../sketch/TransformCommand.h"
#include "../sketch/RotateTransformCommand.h"
using namespace jvgs::core;
using namespace jvgs::input;
using namespace jvgs::game;
using namespace jvgs::video;
using namespace jvgs::math;
using namespace jvgs::sketch;
using namespace jvgs;

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string()\n"
    "    std::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("assign",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static swig_lua_method swig_std_string_methods[] = {
    {"size", _wrap_string_size}, 
    {"length", _wrap_string_length}, 
    {"empty", _wrap_string_empty}, 
    {"c_str", _wrap_string_c_str}, 
    {"data", _wrap_string_data}, 
    {"assign", _wrap_string_assign}, 
    {0,0}
};
static swig_lua_attribute swig_std_string_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_string_bases[] = {0};
static const char *swig_std_string_base_names[] = {0};
static swig_lua_class _wrap_class_std_string = { "string", &SWIGTYPE_p_std__string,_wrap_new_string, swig_delete_string, swig_std_string_methods, swig_std_string_attributes, swig_std_string_bases, swig_std_string_base_names };

static int _wrap_LogManager_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::core::LogManager *result = 0 ;
  
  SWIG_check_num_args("jvgs::core::LogManager::getInstance",0,0)
  result = (jvgs::core::LogManager *)jvgs::core::LogManager::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__core__LogManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_message(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::core::LogManager *arg1 = (jvgs::core::LogManager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("message",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("message",1,"jvgs::core::LogManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("message",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__core__LogManager,0))){
    SWIG_fail_ptr("LogManager_message",1,SWIGTYPE_p_jvgs__core__LogManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->message((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_warning(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::core::LogManager *arg1 = (jvgs::core::LogManager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("warning",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("warning",1,"jvgs::core::LogManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("warning",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__core__LogManager,0))){
    SWIG_fail_ptr("LogManager_warning",1,SWIGTYPE_p_jvgs__core__LogManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->warning((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogManager_error(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::core::LogManager *arg1 = (jvgs::core::LogManager *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  SWIG_check_num_args("error",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("error",1,"jvgs::core::LogManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("error",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__core__LogManager,0))){
    SWIG_fail_ptr("LogManager_error",1,SWIGTYPE_p_jvgs__core__LogManager);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->error((char const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_jvgs_core_LogManager_methods[] = {
    {"message", _wrap_LogManager_message}, 
    {"warning", _wrap_LogManager_warning}, 
    {"error", _wrap_LogManager_error}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_core_LogManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_core_LogManager_bases[] = {0};
static const char *swig_jvgs_core_LogManager_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_core_LogManager = { "LogManager", &SWIGTYPE_p_jvgs__core__LogManager,0,0, swig_jvgs_core_LogManager_methods, swig_jvgs_core_LogManager_attributes, swig_jvgs_core_LogManager_bases, swig_jvgs_core_LogManager_base_names };

static int _wrap_KeyListener_isKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::KeyListener *arg1 = (jvgs::input::KeyListener *) 0 ;
  Key *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("isKeyDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isKeyDown",1,"jvgs::input::KeyListener const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("isKeyDown",2,"Key const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__KeyListener,0))){
    SWIG_fail_ptr("KeyListener_isKeyDown",1,SWIGTYPE_p_jvgs__input__KeyListener);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Key,0))){
    SWIG_fail_ptr("KeyListener_isKeyDown",2,SWIGTYPE_p_Key);
  }
  
  result = (bool)((jvgs::input::KeyListener const *)arg1)->isKeyDown((Key const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyListener_keyPressed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::KeyListener *arg1 = (jvgs::input::KeyListener *) 0 ;
  Key *arg2 = 0 ;
  
  SWIG_check_num_args("keyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("keyPressed",1,"jvgs::input::KeyListener *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("keyPressed",2,"Key const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__KeyListener,0))){
    SWIG_fail_ptr("KeyListener_keyPressed",1,SWIGTYPE_p_jvgs__input__KeyListener);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Key,0))){
    SWIG_fail_ptr("KeyListener_keyPressed",2,SWIGTYPE_p_Key);
  }
  
  (arg1)->keyPressed((Key const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KeyListener(void *obj) {
jvgs::input::KeyListener *arg1 = (jvgs::input::KeyListener *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_input_KeyListener_methods[] = {
    {"isKeyDown", _wrap_KeyListener_isKeyDown}, 
    {"keyPressed", _wrap_KeyListener_keyPressed}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_input_KeyListener_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_input_KeyListener_bases[] = {0};
static const char *swig_jvgs_input_KeyListener_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_input_KeyListener = { "KeyListener", &SWIGTYPE_p_jvgs__input__KeyListener,0, swig_delete_KeyListener, swig_jvgs_input_KeyListener_methods, swig_jvgs_input_KeyListener_attributes, swig_jvgs_input_KeyListener_bases, swig_jvgs_input_KeyListener_base_names };

static int _wrap_InputManager_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::InputManager *result = 0 ;
  
  SWIG_check_num_args("jvgs::input::InputManager::getInstance",0,0)
  result = (jvgs::input::InputManager *)jvgs::input::InputManager::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__input__InputManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_isKeyDown(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::InputManager *arg1 = (jvgs::input::InputManager *) 0 ;
  jvgs::input::Key *arg2 = 0 ;
  jvgs::input::Key temp2 ;
  bool result;
  
  SWIG_check_num_args("isKeyDown",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isKeyDown",1,"jvgs::input::InputManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isKeyDown",2,"jvgs::input::Key const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__InputManager,0))){
    SWIG_fail_ptr("InputManager_isKeyDown",1,SWIGTYPE_p_jvgs__input__InputManager);
  }
  
  temp2=(jvgs::input::Key)(int)lua_tonumber(L,2); arg2=&temp2;
  result = (bool)((jvgs::input::InputManager const *)arg1)->isKeyDown((jvgs::input::Key const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_update(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::InputManager *arg1 = (jvgs::input::InputManager *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"jvgs::input::InputManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__InputManager,0))){
    SWIG_fail_ptr("InputManager_update",1,SWIGTYPE_p_jvgs__input__InputManager);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_addKeyListener(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::InputManager *arg1 = (jvgs::input::InputManager *) 0 ;
  jvgs::input::KeyListener *arg2 = (jvgs::input::KeyListener *) 0 ;
  
  SWIG_check_num_args("addKeyListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addKeyListener",1,"jvgs::input::InputManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addKeyListener",2,"jvgs::input::KeyListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__InputManager,0))){
    SWIG_fail_ptr("InputManager_addKeyListener",1,SWIGTYPE_p_jvgs__input__InputManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__input__KeyListener,0))){
    SWIG_fail_ptr("InputManager_addKeyListener",2,SWIGTYPE_p_jvgs__input__KeyListener);
  }
  
  (arg1)->addKeyListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputManager_removeKeyListener(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::input::InputManager *arg1 = (jvgs::input::InputManager *) 0 ;
  jvgs::input::KeyListener *arg2 = (jvgs::input::KeyListener *) 0 ;
  
  SWIG_check_num_args("removeKeyListener",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeKeyListener",1,"jvgs::input::InputManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("removeKeyListener",2,"jvgs::input::KeyListener *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__input__InputManager,0))){
    SWIG_fail_ptr("InputManager_removeKeyListener",1,SWIGTYPE_p_jvgs__input__InputManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__input__KeyListener,0))){
    SWIG_fail_ptr("InputManager_removeKeyListener",2,SWIGTYPE_p_jvgs__input__KeyListener);
  }
  
  (arg1)->removeKeyListener(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_jvgs_input_InputManager_methods[] = {
    {"isKeyDown", _wrap_InputManager_isKeyDown}, 
    {"update", _wrap_InputManager_update}, 
    {"addKeyListener", _wrap_InputManager_addKeyListener}, 
    {"removeKeyListener", _wrap_InputManager_removeKeyListener}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_input_InputManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_input_InputManager_bases[] = {0};
static const char *swig_jvgs_input_InputManager_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_input_InputManager = { "InputManager", &SWIGTYPE_p_jvgs__input__InputManager,0,0, swig_jvgs_input_InputManager_methods, swig_jvgs_input_InputManager_attributes, swig_jvgs_input_InputManager_bases, swig_jvgs_input_InputManager_base_names };

static int _wrap_new_GravityAffector(lua_State* L) {
  int SWIG_arg = 0;
  Entity *arg1 = (Entity *) 0 ;
  math::Vector2D *arg2 = 0 ;
  jvgs::game::GravityAffector *result = 0 ;
  
  SWIG_check_num_args("jvgs::game::GravityAffector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::game::GravityAffector",1,"Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::game::GravityAffector",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Entity,0))){
    SWIG_fail_ptr("new_GravityAffector",1,SWIGTYPE_p_Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("new_GravityAffector",2,SWIGTYPE_p_math__Vector2D);
  }
  
  result = (jvgs::game::GravityAffector *)new jvgs::game::GravityAffector(arg1,(math::Vector2D const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__game__GravityAffector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GravityAffector_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::GravityAffector *arg1 = (jvgs::game::GravityAffector *) 0 ;
  int result;
  
  SWIG_check_num_args("getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPriority",1,"jvgs::game::GravityAffector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__GravityAffector,0))){
    SWIG_fail_ptr("GravityAffector_getPriority",1,SWIGTYPE_p_jvgs__game__GravityAffector);
  }
  
  result = (int)((jvgs::game::GravityAffector const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GravityAffector_affect(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::GravityAffector *arg1 = (jvgs::game::GravityAffector *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("affect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("affect",1,"jvgs::game::GravityAffector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("affect",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__GravityAffector,0))){
    SWIG_fail_ptr("GravityAffector_affect",1,SWIGTYPE_p_jvgs__game__GravityAffector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->affect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GravityAffector(void *obj) {
jvgs::game::GravityAffector *arg1 = (jvgs::game::GravityAffector *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_game_GravityAffector_methods[] = {
    {"getPriority", _wrap_GravityAffector_getPriority}, 
    {"affect", _wrap_GravityAffector_affect}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_game_GravityAffector_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_game_GravityAffector_bases[] = {0};
static const char *swig_jvgs_game_GravityAffector_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_game_GravityAffector = { "GravityAffector", &SWIGTYPE_p_jvgs__game__GravityAffector,_wrap_new_GravityAffector, swig_delete_GravityAffector, swig_jvgs_game_GravityAffector_methods, swig_jvgs_game_GravityAffector_attributes, swig_jvgs_game_GravityAffector_bases, swig_jvgs_game_GravityAffector_base_names };

static int _wrap_new_Entity(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *result = 0 ;
  
  SWIG_check_num_args("jvgs::game::Entity",0,0)
  result = (jvgs::game::Entity *)new jvgs::game::Entity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__game__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_prepare(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  
  SWIG_check_num_args("prepare",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("prepare",1,"jvgs::game::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_prepare",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  (arg1)->prepare();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"jvgs::game::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_getPosition",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  result = (math::Vector2D *) &((jvgs::game::Entity const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"jvgs::game::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_setPosition",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("Entity_setPosition",2,SWIGTYPE_p_math__Vector2D);
  }
  
  (arg1)->setPosition((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getVelocity(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getVelocity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVelocity",1,"jvgs::game::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_getVelocity",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  result = (math::Vector2D *) &((jvgs::game::Entity const *)arg1)->getVelocity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setVelocity(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setVelocity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVelocity",1,"jvgs::game::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVelocity",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_setVelocity",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("Entity_setVelocity",2,SWIGTYPE_p_math__Vector2D);
  }
  
  (arg1)->setVelocity((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getEllipse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getEllipse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEllipse",1,"jvgs::game::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_getEllipse",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  result = (math::Vector2D *) &((jvgs::game::Entity const *)arg1)->getEllipse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setEllipse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setEllipse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEllipse",1,"jvgs::game::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setEllipse",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_setEllipse",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("Entity_setEllipse",2,SWIGTYPE_p_math__Vector2D);
  }
  
  (arg1)->setEllipse((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_addAffector(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  jvgs::game::Affector *arg2 = (jvgs::game::Affector *) 0 ;
  
  SWIG_check_num_args("addAffector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addAffector",1,"jvgs::game::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addAffector",2,"jvgs::game::Affector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_addAffector",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__game__Affector,0))){
    SWIG_fail_ptr("Entity_addAffector",2,SWIGTYPE_p_jvgs__game__Affector);
  }
  
  (arg1)->addAffector(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_update(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"jvgs::game::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("Entity_update",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
jvgs::game::Entity *arg1 = (jvgs::game::Entity *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_game_Entity_methods[] = {
    {"prepare", _wrap_Entity_prepare}, 
    {"getPosition", _wrap_Entity_getPosition}, 
    {"setPosition", _wrap_Entity_setPosition}, 
    {"getVelocity", _wrap_Entity_getVelocity}, 
    {"setVelocity", _wrap_Entity_setVelocity}, 
    {"getEllipse", _wrap_Entity_getEllipse}, 
    {"setEllipse", _wrap_Entity_setEllipse}, 
    {"addAffector", _wrap_Entity_addAffector}, 
    {"update", _wrap_Entity_update}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_game_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_game_Entity_bases[] = {0};
static const char *swig_jvgs_game_Entity_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_game_Entity = { "Entity", &SWIGTYPE_p_jvgs__game__Entity,_wrap_new_Entity, swig_delete_Entity, swig_jvgs_game_Entity_methods, swig_jvgs_game_Entity_attributes, swig_jvgs_game_Entity_bases, swig_jvgs_game_Entity_base_names };

static int _wrap_InputAffector_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::InputAffector *arg1 = (jvgs::game::InputAffector *) 0 ;
  int result;
  
  SWIG_check_num_args("getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPriority",1,"jvgs::game::InputAffector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__InputAffector,0))){
    SWIG_fail_ptr("InputAffector_getPriority",1,SWIGTYPE_p_jvgs__game__InputAffector);
  }
  
  result = (int)((jvgs::game::InputAffector const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputAffector_affect(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::InputAffector *arg1 = (jvgs::game::InputAffector *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("affect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("affect",1,"jvgs::game::InputAffector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("affect",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__InputAffector,0))){
    SWIG_fail_ptr("InputAffector_affect",1,SWIGTYPE_p_jvgs__game__InputAffector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->affect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_InputAffector_keyPressed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::InputAffector *arg1 = (jvgs::game::InputAffector *) 0 ;
  jvgs::input::Key *arg2 = 0 ;
  jvgs::input::Key temp2 ;
  
  SWIG_check_num_args("keyPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("keyPressed",1,"jvgs::game::InputAffector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("keyPressed",2,"jvgs::input::Key const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__InputAffector,0))){
    SWIG_fail_ptr("InputAffector_keyPressed",1,SWIGTYPE_p_jvgs__game__InputAffector);
  }
  
  temp2=(jvgs::input::Key)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->keyPressed((jvgs::input::Key const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InputAffector(void *obj) {
jvgs::game::InputAffector *arg1 = (jvgs::game::InputAffector *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_game_InputAffector_methods[] = {
    {"getPriority", _wrap_InputAffector_getPriority}, 
    {"affect", _wrap_InputAffector_affect}, 
    {"keyPressed", _wrap_InputAffector_keyPressed}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_game_InputAffector_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_game_InputAffector_bases[] = {0};
static const char *swig_jvgs_game_InputAffector_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_game_InputAffector = { "InputAffector", &SWIGTYPE_p_jvgs__game__InputAffector,0, swig_delete_InputAffector, swig_jvgs_game_InputAffector_methods, swig_jvgs_game_InputAffector_attributes, swig_jvgs_game_InputAffector_bases, swig_jvgs_game_InputAffector_base_names };

static int _wrap_Affector_getEntity(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Affector *arg1 = (jvgs::game::Affector *) 0 ;
  jvgs::game::Entity *result = 0 ;
  
  SWIG_check_num_args("getEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEntity",1,"jvgs::game::Affector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Affector,0))){
    SWIG_fail_ptr("Affector_getEntity",1,SWIGTYPE_p_jvgs__game__Affector);
  }
  
  result = (jvgs::game::Entity *)((jvgs::game::Affector const *)arg1)->getEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__game__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Affector_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Affector *arg1 = (jvgs::game::Affector *) 0 ;
  int result;
  
  SWIG_check_num_args("getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPriority",1,"jvgs::game::Affector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Affector,0))){
    SWIG_fail_ptr("Affector_getPriority",1,SWIGTYPE_p_jvgs__game__Affector);
  }
  
  result = (int)((jvgs::game::Affector const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Affector_affect(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Affector *arg1 = (jvgs::game::Affector *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("affect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("affect",1,"jvgs::game::Affector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("affect",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Affector,0))){
    SWIG_fail_ptr("Affector_affect",1,SWIGTYPE_p_jvgs__game__Affector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->affect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Affector(void *obj) {
jvgs::game::Affector *arg1 = (jvgs::game::Affector *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_game_Affector_methods[] = {
    {"getEntity", _wrap_Affector_getEntity}, 
    {"getPriority", _wrap_Affector_getPriority}, 
    {"affect", _wrap_Affector_affect}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_game_Affector_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_game_Affector_bases[] = {0};
static const char *swig_jvgs_game_Affector_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_game_Affector = { "Affector", &SWIGTYPE_p_jvgs__game__Affector,0, swig_delete_Affector, swig_jvgs_game_Affector_methods, swig_jvgs_game_Affector_attributes, swig_jvgs_game_Affector_bases, swig_jvgs_game_Affector_base_names };

static int _wrap_new_CollisionResponseAffector(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::Entity *arg1 = (jvgs::game::Entity *) 0 ;
  sketch::Sketch *arg2 = (sketch::Sketch *) 0 ;
  jvgs::game::CollisionResponseAffector *result = 0 ;
  
  SWIG_check_num_args("jvgs::game::CollisionResponseAffector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::game::CollisionResponseAffector",1,"jvgs::game::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jvgs::game::CollisionResponseAffector",2,"sketch::Sketch *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__Entity,0))){
    SWIG_fail_ptr("new_CollisionResponseAffector",1,SWIGTYPE_p_jvgs__game__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_sketch__Sketch,0))){
    SWIG_fail_ptr("new_CollisionResponseAffector",2,SWIGTYPE_p_sketch__Sketch);
  }
  
  result = (jvgs::game::CollisionResponseAffector *)new jvgs::game::CollisionResponseAffector(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__game__CollisionResponseAffector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseAffector_getPriority(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::CollisionResponseAffector *arg1 = (jvgs::game::CollisionResponseAffector *) 0 ;
  int result;
  
  SWIG_check_num_args("getPriority",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPriority",1,"jvgs::game::CollisionResponseAffector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector,0))){
    SWIG_fail_ptr("CollisionResponseAffector_getPriority",1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector);
  }
  
  result = (int)((jvgs::game::CollisionResponseAffector const *)arg1)->getPriority();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseAffector_affect(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::CollisionResponseAffector *arg1 = (jvgs::game::CollisionResponseAffector *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("affect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("affect",1,"jvgs::game::CollisionResponseAffector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("affect",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector,0))){
    SWIG_fail_ptr("CollisionResponseAffector_affect",1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->affect(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CollisionResponseAffector_closestCollision(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::game::CollisionResponseAffector *arg1 = (jvgs::game::CollisionResponseAffector *) 0 ;
  float arg2 ;
  math::Vector2D *arg3 = (math::Vector2D *) 0 ;
  float *arg4 = (float *) 0 ;
  float *arg5 = (float *) 0 ;
  math::LineSegment *result = 0 ;
  
  SWIG_check_num_args("closestCollision",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("closestCollision",1,"jvgs::game::CollisionResponseAffector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("closestCollision",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("closestCollision",3,"math::Vector2D *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("closestCollision",4,"float *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("closestCollision",5,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector,0))){
    SWIG_fail_ptr("CollisionResponseAffector_closestCollision",1,SWIGTYPE_p_jvgs__game__CollisionResponseAffector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("CollisionResponseAffector_closestCollision",3,SWIGTYPE_p_math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CollisionResponseAffector_closestCollision",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("CollisionResponseAffector_closestCollision",5,SWIGTYPE_p_float);
  }
  
  result = (math::LineSegment *)(arg1)->closestCollision(arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math__LineSegment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CollisionResponseAffector(void *obj) {
jvgs::game::CollisionResponseAffector *arg1 = (jvgs::game::CollisionResponseAffector *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_game_CollisionResponseAffector_methods[] = {
    {"getPriority", _wrap_CollisionResponseAffector_getPriority}, 
    {"affect", _wrap_CollisionResponseAffector_affect}, 
    {"closestCollision", _wrap_CollisionResponseAffector_closestCollision}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_game_CollisionResponseAffector_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_game_CollisionResponseAffector_bases[] = {0,0};
static const char *swig_jvgs_game_CollisionResponseAffector_base_names[] = {"jvgs::game::Affector *",0};
static swig_lua_class _wrap_class_jvgs_game_CollisionResponseAffector = { "CollisionResponseAffector", &SWIGTYPE_p_jvgs__game__CollisionResponseAffector,_wrap_new_CollisionResponseAffector, swig_delete_CollisionResponseAffector, swig_jvgs_game_CollisionResponseAffector_methods, swig_jvgs_game_CollisionResponseAffector_attributes, swig_jvgs_game_CollisionResponseAffector_bases, swig_jvgs_game_CollisionResponseAffector_base_names };

static int _wrap_VideoManager_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::VideoManager::getInstance",0,0)
  result = (jvgs::video::VideoManager *)jvgs::video::VideoManager::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__VideoManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_setVideoMode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  std::string arg2 ;
  
  SWIG_check_num_args("setVideoMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVideoMode",1,"jvgs::video::VideoManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setVideoMode",2,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_setVideoMode",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  (&arg2)->assign(lua_tostring(L,2),lua_strlen(L,2));
  (arg1)->setVideoMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_setVideoMode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  math::Vector2D *arg2 = 0 ;
  std::string arg3 ;
  
  SWIG_check_num_args("setVideoMode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVideoMode",1,"jvgs::video::VideoManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setVideoMode",2,"math::Vector2D const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("setVideoMode",3,"std::string");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_setVideoMode",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("VideoManager_setVideoMode",2,SWIGTYPE_p_math__Vector2D);
  }
  
  (&arg3)->assign(lua_tostring(L,3),lua_strlen(L,3));
  (arg1)->setVideoMode((math::Vector2D const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_setVideoMode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__video__VideoManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_VideoManager_setVideoMode__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__video__VideoManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_math__Vector2D, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_VideoManager_setVideoMode__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'VideoManager_setVideoMode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setVideoMode(jvgs::video::VideoManager *,std::string)\n"
    "    setVideoMode(jvgs::video::VideoManager *,math::Vector2D const &,std::string)\n");
  lua_error(L);return 0;
}


static int _wrap_VideoManager_setVideoDefaults(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("setVideoDefaults",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVideoDefaults",1,"jvgs::video::VideoManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_setVideoDefaults",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  (arg1)->setVideoDefaults();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_getSize(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_getSize",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  result = (math::Vector2D *) &((jvgs::video::VideoManager const *)arg1)->getSize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_clear(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_clear",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_flip(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("flip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("flip",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_flip",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->flip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_identity(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("identity",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_identity",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_push(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("push",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("push",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_push",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->push();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_pop(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  
  SWIG_check_num_args("pop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pop",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_pop",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->pop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_translate(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translate",1,"jvgs::video::VideoManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translate",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_translate",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("VideoManager_translate",2,SWIGTYPE_p_math__Vector2D);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->translate((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_scale(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"jvgs::video::VideoManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scale",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_scale",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("VideoManager_scale",2,SWIGTYPE_p_math__Vector2D);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->scale((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_rotate(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate",1,"jvgs::video::VideoManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotate",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_rotate",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  ((jvgs::video::VideoManager const *)arg1)->rotate((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_transform(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  math::AffineTransformationMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"jvgs::video::VideoManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"math::AffineTransformationMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_transform",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("VideoManager_transform",2,SWIGTYPE_p_math__AffineTransformationMatrix);
  }
  
  ((jvgs::video::VideoManager const *)arg1)->transform((math::AffineTransformationMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_setColor(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  SWIG_check_num_args("setColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColor",1,"jvgs::video::VideoManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColor",2,"Color");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_setColor",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Color,0))){
    SWIG_fail_ptr("VideoManager_setColor",2,SWIGTYPE_p_Color);
  }
  arg2 = *argp2;
  
  (arg1)->setColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_getColor(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  Color *result = 0 ;
  
  SWIG_check_num_args("getColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getColor",1,"jvgs::video::VideoManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_getColor",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  result = (Color *) &((jvgs::video::VideoManager const *)arg1)->getColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VideoManager_setClearColor(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::VideoManager *arg1 = (jvgs::video::VideoManager *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  SWIG_check_num_args("setClearColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setClearColor",1,"jvgs::video::VideoManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setClearColor",2,"Color");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__VideoManager,0))){
    SWIG_fail_ptr("VideoManager_setClearColor",1,SWIGTYPE_p_jvgs__video__VideoManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Color,0))){
    SWIG_fail_ptr("VideoManager_setClearColor",2,SWIGTYPE_p_Color);
  }
  arg2 = *argp2;
  
  ((jvgs::video::VideoManager const *)arg1)->setClearColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_jvgs_video_VideoManager_methods[] = {
    {"setVideoMode", _wrap_VideoManager_setVideoMode}, 
    {"setVideoDefaults", _wrap_VideoManager_setVideoDefaults}, 
    {"getSize", _wrap_VideoManager_getSize}, 
    {"clear", _wrap_VideoManager_clear}, 
    {"flip", _wrap_VideoManager_flip}, 
    {"identity", _wrap_VideoManager_identity}, 
    {"push", _wrap_VideoManager_push}, 
    {"pop", _wrap_VideoManager_pop}, 
    {"translate", _wrap_VideoManager_translate}, 
    {"scale", _wrap_VideoManager_scale}, 
    {"rotate", _wrap_VideoManager_rotate}, 
    {"transform", _wrap_VideoManager_transform}, 
    {"setColor", _wrap_VideoManager_setColor}, 
    {"getColor", _wrap_VideoManager_getColor}, 
    {"setClearColor", _wrap_VideoManager_setClearColor}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_video_VideoManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_video_VideoManager_bases[] = {0};
static const char *swig_jvgs_video_VideoManager_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_video_VideoManager = { "VideoManager", &SWIGTYPE_p_jvgs__video__VideoManager,0,0, swig_jvgs_video_VideoManager_methods, swig_jvgs_video_VideoManager_attributes, swig_jvgs_video_VideoManager_bases, swig_jvgs_video_VideoManager_base_names };

static int _wrap_new_Renderer(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Renderer *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Renderer",0,0)
  result = (jvgs::video::Renderer *)new jvgs::video::Renderer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Renderer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_begin(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Renderer *arg1 = (jvgs::video::Renderer *) 0 ;
  jvgs::video::RenderType arg2 ;
  
  SWIG_check_num_args("begin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("begin",1,"jvgs::video::Renderer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("begin",2,"jvgs::video::RenderType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Renderer_begin",1,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  arg2 = (jvgs::video::RenderType)(int)lua_tonumber(L, 2);
  (arg1)->begin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_end(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Renderer *arg1 = (jvgs::video::Renderer *) 0 ;
  
  SWIG_check_num_args("end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("end",1,"jvgs::video::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Renderer_end",1,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  (arg1)->end();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_isBusy(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Renderer *arg1 = (jvgs::video::Renderer *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBusy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBusy",1,"jvgs::video::Renderer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Renderer_isBusy",1,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  result = (bool)((jvgs::video::Renderer const *)arg1)->isBusy();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Renderer_vector(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Renderer *arg1 = (jvgs::video::Renderer *) 0 ;
  math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vector",1,"jvgs::video::Renderer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vector",2,"math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Renderer_vector",1,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_math__Vector2D,0))){
    SWIG_fail_ptr("Renderer_vector",2,SWIGTYPE_p_math__Vector2D);
  }
  
  (arg1)->vector((math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Renderer(void *obj) {
jvgs::video::Renderer *arg1 = (jvgs::video::Renderer *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_video_Renderer_methods[] = {
    {"begin", _wrap_Renderer_begin}, 
    {"end", _wrap_Renderer_end}, 
    {"isBusy", _wrap_Renderer_isBusy}, 
    {"vector", _wrap_Renderer_vector}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_video_Renderer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_video_Renderer_bases[] = {0};
static const char *swig_jvgs_video_Renderer_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_video_Renderer = { "Renderer", &SWIGTYPE_p_jvgs__video__Renderer,_wrap_new_Renderer, swig_delete_Renderer, swig_jvgs_video_Renderer_methods, swig_jvgs_video_Renderer_attributes, swig_jvgs_video_Renderer_bases, swig_jvgs_video_Renderer_base_names };

static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  jvgs::video::Color *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::video::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::video::Color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jvgs::video::Color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("jvgs::video::Color",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (jvgs::video::Color *)new jvgs::video::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  jvgs::video::Color *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Color",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::video::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::video::Color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jvgs::video::Color",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (jvgs::video::Color *)new jvgs::video::Color(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  jvgs::video::Color *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Color",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::video::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::video::Color",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (jvgs::video::Color *)new jvgs::video::Color(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  jvgs::video::Color *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Color",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::video::Color",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (jvgs::video::Color *)new jvgs::video::Color(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::Color",0,0)
  result = (jvgs::video::Color *)new jvgs::video::Color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Color__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::video::Color(float,float,float,float)\n"
    "    jvgs::video::Color(float,float,float)\n"
    "    jvgs::video::Color(float,float)\n"
    "    jvgs::video::Color(float)\n"
    "    jvgs::video::Color()\n");
  lua_error(L);return 0;
}


static int _wrap_Color_getRed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("getRed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRed",1,"jvgs::video::Color const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_getRed",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  result = (float)((jvgs::video::Color const *)arg1)->getRed();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_setRed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setRed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRed",1,"jvgs::video::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setRed",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_setRed",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setRed(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getGreen(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("getGreen",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGreen",1,"jvgs::video::Color const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_getGreen",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  result = (float)((jvgs::video::Color const *)arg1)->getGreen();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_setGreen(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setGreen",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setGreen",1,"jvgs::video::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setGreen",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_setGreen",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setGreen(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getBlue(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("getBlue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBlue",1,"jvgs::video::Color const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_getBlue",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  result = (float)((jvgs::video::Color const *)arg1)->getBlue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_setBlue(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setBlue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBlue",1,"jvgs::video::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBlue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_setBlue",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setBlue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_getAlpha(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("getAlpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAlpha",1,"jvgs::video::Color const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_getAlpha",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  result = (float)((jvgs::video::Color const *)arg1)->getAlpha();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_setAlpha(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::Color *arg1 = (jvgs::video::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setAlpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAlpha",1,"jvgs::video::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAlpha",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__Color,0))){
    SWIG_fail_ptr("Color_setAlpha",1,SWIGTYPE_p_jvgs__video__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setAlpha(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
jvgs::video::Color *arg1 = (jvgs::video::Color *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_video_Color_methods[] = {
    {"getRed", _wrap_Color_getRed}, 
    {"setRed", _wrap_Color_setRed}, 
    {"getGreen", _wrap_Color_getGreen}, 
    {"setGreen", _wrap_Color_setGreen}, 
    {"getBlue", _wrap_Color_getBlue}, 
    {"setBlue", _wrap_Color_setBlue}, 
    {"getAlpha", _wrap_Color_getAlpha}, 
    {"setAlpha", _wrap_Color_setAlpha}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_video_Color_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_video_Color_bases[] = {0};
static const char *swig_jvgs_video_Color_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_video_Color = { "Color", &SWIGTYPE_p_jvgs__video__Color,_wrap_new_Color, swig_delete_Color, swig_jvgs_video_Color_methods, swig_jvgs_video_Color_attributes, swig_jvgs_video_Color_bases, swig_jvgs_video_Color_base_names };

static int _wrap_ListManager_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::ListManager *result = 0 ;
  
  SWIG_check_num_args("jvgs::video::ListManager::getInstance",0,0)
  result = (jvgs::video::ListManager *)jvgs::video::ListManager::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__video__ListManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListManager_beginList(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::ListManager *arg1 = (jvgs::video::ListManager *) 0 ;
  jvgs::video::ListManager::List result;
  
  SWIG_check_num_args("beginList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("beginList",1,"jvgs::video::ListManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__ListManager,0))){
    SWIG_fail_ptr("ListManager_beginList",1,SWIGTYPE_p_jvgs__video__ListManager);
  }
  
  result = ((jvgs::video::ListManager const *)arg1)->beginList();
  {
    jvgs::video::ListManager::List * resultptr = new jvgs::video::ListManager::List((const jvgs::video::ListManager::List &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_GLuint,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListManager_endList(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::ListManager *arg1 = (jvgs::video::ListManager *) 0 ;
  
  SWIG_check_num_args("endList",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("endList",1,"jvgs::video::ListManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__ListManager,0))){
    SWIG_fail_ptr("ListManager_endList",1,SWIGTYPE_p_jvgs__video__ListManager);
  }
  
  ((jvgs::video::ListManager const *)arg1)->endList();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListManager_callList(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::ListManager *arg1 = (jvgs::video::ListManager *) 0 ;
  jvgs::video::ListManager::List *arg2 = 0 ;
  
  SWIG_check_num_args("callList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("callList",1,"jvgs::video::ListManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("callList",2,"jvgs::video::ListManager::List const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__ListManager,0))){
    SWIG_fail_ptr("ListManager_callList",1,SWIGTYPE_p_jvgs__video__ListManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ListManager_callList",2,SWIGTYPE_p_GLuint);
  }
  
  ((jvgs::video::ListManager const *)arg1)->callList((jvgs::video::ListManager::List const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ListManager_deleteList(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::video::ListManager *arg1 = (jvgs::video::ListManager *) 0 ;
  jvgs::video::ListManager::List arg2 ;
  jvgs::video::ListManager::List *argp2 ;
  
  SWIG_check_num_args("deleteList",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("deleteList",1,"jvgs::video::ListManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("deleteList",2,"jvgs::video::ListManager::List");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__video__ListManager,0))){
    SWIG_fail_ptr("ListManager_deleteList",1,SWIGTYPE_p_jvgs__video__ListManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_GLuint,0))){
    SWIG_fail_ptr("ListManager_deleteList",2,SWIGTYPE_p_GLuint);
  }
  arg2 = *argp2;
  
  ((jvgs::video::ListManager const *)arg1)->deleteList(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_jvgs_video_ListManager_methods[] = {
    {"beginList", _wrap_ListManager_beginList}, 
    {"endList", _wrap_ListManager_endList}, 
    {"callList", _wrap_ListManager_callList}, 
    {"deleteList", _wrap_ListManager_deleteList}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_video_ListManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_video_ListManager_bases[] = {0};
static const char *swig_jvgs_video_ListManager_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_video_ListManager = { "ListManager", &SWIGTYPE_p_jvgs__video__ListManager,0,0, swig_jvgs_video_ListManager_methods, swig_jvgs_video_ListManager_attributes, swig_jvgs_video_ListManager_bases, swig_jvgs_video_ListManager_base_names };

static int _wrap_PathSegment_getLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::PathSegment *arg1 = (jvgs::math::PathSegment *) 0 ;
  float result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"jvgs::math::PathSegment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__PathSegment,0))){
    SWIG_fail_ptr("PathSegment_getLength",1,SWIGTYPE_p_jvgs__math__PathSegment);
  }
  
  result = (float)((jvgs::math::PathSegment const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathSegment_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::PathSegment *arg1 = (jvgs::math::PathSegment *) 0 ;
  float arg2 ;
  Vector2D result;
  
  SWIG_check_num_args("getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPoint",1,"jvgs::math::PathSegment const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPoint",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__PathSegment,0))){
    SWIG_fail_ptr("PathSegment_getPoint",1,SWIGTYPE_p_jvgs__math__PathSegment);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((jvgs::math::PathSegment const *)arg1)->getPoint(arg2);
  {
    Vector2D * resultptr = new Vector2D((const Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathSegment(void *obj) {
jvgs::math::PathSegment *arg1 = (jvgs::math::PathSegment *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_PathSegment_methods[] = {
    {"getLength", _wrap_PathSegment_getLength}, 
    {"getPoint", _wrap_PathSegment_getPoint}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_PathSegment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_PathSegment_bases[] = {0};
static const char *swig_jvgs_math_PathSegment_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_PathSegment = { "PathSegment", &SWIGTYPE_p_jvgs__math__PathSegment,0, swig_delete_PathSegment, swig_jvgs_math_PathSegment_methods, swig_jvgs_math_PathSegment_attributes, swig_jvgs_math_PathSegment_bases, swig_jvgs_math_PathSegment_base_names };

static int _wrap_new_Vector2D__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Vector2D",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::math::Vector2D",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::math::Vector2D",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (jvgs::math::Vector2D *)new jvgs::math::Vector2D(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Vector2D",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::math::Vector2D",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (jvgs::math::Vector2D *)new jvgs::math::Vector2D(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Vector2D",0,0)
  result = (jvgs::math::Vector2D *)new jvgs::math::Vector2D();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Vector2D",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::Vector2D",1,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_Vector2D",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (jvgs::math::Vector2D *)new jvgs::math::Vector2D((jvgs::math::Vector2D const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2D(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2D__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2D__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2D__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2D__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Vector2D'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::math::Vector2D(float,float)\n"
    "    jvgs::math::Vector2D(float)\n"
    "    jvgs::math::Vector2D()\n"
    "    jvgs::math::Vector2D(jvgs::math::Vector2D const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2D_getX(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float result;
  
  SWIG_check_num_args("getX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getX",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getX",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->getX();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_setX(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("setX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setX",1,"jvgs::math::Vector2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setX",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_setX",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->setX((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_getY(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float result;
  
  SWIG_check_num_args("getY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getY",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getY",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->getY();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_setY(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  
  SWIG_check_num_args("setY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setY",1,"jvgs::math::Vector2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setY",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_setY",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->setY((float const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___add(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"jvgs::math::Vector2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___add",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___add",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->operator +((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___sub(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"jvgs::math::Vector2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___sub",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___sub",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->operator -((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"jvgs::math::Vector2D const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___mul",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((jvgs::math::Vector2D const *)arg1)->operator *((float const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___div(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"jvgs::math::Vector2D const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___div",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((jvgs::math::Vector2D const *)arg1)->operator /((float const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"jvgs::math::Vector2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___mul",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D___mul",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->operator *((jvgs::math::Vector2D const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2D___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2D___mul__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Vector2D___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(jvgs::math::Vector2D const *,float const &)\n"
    "    operator *(jvgs::math::Vector2D const *,jvgs::math::Vector2D const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2D_onlyX(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("onlyX",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onlyX",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_onlyX",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->onlyX();
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_onlyY(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("onlyY",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onlyY",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_onlyY",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->onlyY();
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_getSquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float result;
  
  SWIG_check_num_args("getSquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSquaredLength",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getSquaredLength",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->getSquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_getLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getLength",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_setLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setLength",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLength",1,"jvgs::math::Vector2D *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLength",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_setLength",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setLength(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_getDistance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("getDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDistance",1,"jvgs::math::Vector2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getDistance",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getDistance",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_getDistance",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Vector2D const *)arg1)->getDistance((jvgs::math::Vector2D const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_normalized(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("normalized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalized",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_normalized",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->normalized();
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_inverted(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("inverted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverted",1,"jvgs::math::Vector2D const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_inverted",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->inverted();
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2D_reflect(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reflect",1,"jvgs::math::Vector2D const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("reflect",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_reflect",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Vector2D_reflect",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Vector2D const *)arg1)->reflect((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2D(void *obj) {
jvgs::math::Vector2D *arg1 = (jvgs::math::Vector2D *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_Vector2D_methods[] = {
    {"getX", _wrap_Vector2D_getX}, 
    {"setX", _wrap_Vector2D_setX}, 
    {"getY", _wrap_Vector2D_getY}, 
    {"setY", _wrap_Vector2D_setY}, 
    {"__add", _wrap_Vector2D___add}, 
    {"__sub", _wrap_Vector2D___sub}, 
    {"__div", _wrap_Vector2D___div}, 
    {"__mul", _wrap_Vector2D___mul}, 
    {"onlyX", _wrap_Vector2D_onlyX}, 
    {"onlyY", _wrap_Vector2D_onlyY}, 
    {"getSquaredLength", _wrap_Vector2D_getSquaredLength}, 
    {"getLength", _wrap_Vector2D_getLength}, 
    {"setLength", _wrap_Vector2D_setLength}, 
    {"getDistance", _wrap_Vector2D_getDistance}, 
    {"normalized", _wrap_Vector2D_normalized}, 
    {"inverted", _wrap_Vector2D_inverted}, 
    {"reflect", _wrap_Vector2D_reflect}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_Vector2D_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_Vector2D_bases[] = {0};
static const char *swig_jvgs_math_Vector2D_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_Vector2D = { "Vector2D", &SWIGTYPE_p_jvgs__math__Vector2D,_wrap_new_Vector2D, swig_delete_Vector2D, swig_jvgs_math_Vector2D_methods, swig_jvgs_math_Vector2D_attributes, swig_jvgs_math_Vector2D_bases, swig_jvgs_math_Vector2D_base_names };

static int _wrap_new_Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  jvgs::math::Matrix *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::math::Matrix",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::math::Matrix",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (jvgs::math::Matrix *)new jvgs::math::Matrix(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = 0 ;
  jvgs::math::Matrix *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::Matrix",1,"jvgs::math::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = (jvgs::math::Matrix *)new jvgs::math::Matrix((jvgs::math::Matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::math::Matrix(int,int)\n"
    "    jvgs::math::Matrix(jvgs::math::Matrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  int result;
  
  SWIG_check_num_args("getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeight",1,"jvgs::math::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix_getHeight",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = (int)((jvgs::math::Matrix const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  int result;
  
  SWIG_check_num_args("getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWidth",1,"jvgs::math::Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix_getWidth",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = (int)((jvgs::math::Matrix const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_setValue(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"jvgs::math::Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix_setValue",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_getValue(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  int arg2 ;
  int arg3 ;
  float *result = 0 ;
  
  SWIG_check_num_args("getValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"jvgs::math::Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix_getValue",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float *) &((jvgs::math::Matrix const *)arg1)->getValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___add(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  jvgs::math::Matrix *arg2 = 0 ;
  SwigValueWrapper< jvgs::math::Matrix > result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"jvgs::math::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"jvgs::math::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___add",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___add",2,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = ((jvgs::math::Matrix const *)arg1)->operator +((jvgs::math::Matrix const &)*arg2);
  {
    jvgs::math::Matrix * resultptr = new jvgs::math::Matrix((const jvgs::math::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___sub(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  jvgs::math::Matrix *arg2 = 0 ;
  SwigValueWrapper< jvgs::math::Matrix > result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"jvgs::math::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"jvgs::math::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___sub",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___sub",2,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = ((jvgs::math::Matrix const *)arg1)->operator -((jvgs::math::Matrix const &)*arg2);
  {
    jvgs::math::Matrix * resultptr = new jvgs::math::Matrix((const jvgs::math::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< jvgs::math::Matrix > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"jvgs::math::Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((jvgs::math::Matrix const *)arg1)->operator *((float const &)*arg2);
  {
    jvgs::math::Matrix * resultptr = new jvgs::math::Matrix((const jvgs::math::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___div(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  SwigValueWrapper< jvgs::math::Matrix > result;
  
  SWIG_check_num_args("operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator /",1,"jvgs::math::Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator /",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___div",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = ((jvgs::math::Matrix const *)arg1)->operator /((float const &)*arg2);
  {
    jvgs::math::Matrix * resultptr = new jvgs::math::Matrix((const jvgs::math::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) 0 ;
  jvgs::math::Matrix *arg2 = 0 ;
  SwigValueWrapper< jvgs::math::Matrix > result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"jvgs::math::Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"jvgs::math::Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",1,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Matrix,0))){
    SWIG_fail_ptr("Matrix___mul",2,SWIGTYPE_p_jvgs__math__Matrix);
  }
  
  result = ((jvgs::math::Matrix const *)arg1)->operator *((jvgs::math::Matrix const &)*arg2);
  {
    jvgs::math::Matrix * resultptr = new jvgs::math::Matrix((const jvgs::math::Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jvgs__math__Matrix, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix___mul__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(jvgs::math::Matrix const *,float const &)\n"
    "    operator *(jvgs::math::Matrix const *,jvgs::math::Matrix const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_Matrix(void *obj) {
jvgs::math::Matrix *arg1 = (jvgs::math::Matrix *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_Matrix_methods[] = {
    {"getHeight", _wrap_Matrix_getHeight}, 
    {"getWidth", _wrap_Matrix_getWidth}, 
    {"setValue", _wrap_Matrix_setValue}, 
    {"getValue", _wrap_Matrix_getValue}, 
    {"__add", _wrap_Matrix___add}, 
    {"__sub", _wrap_Matrix___sub}, 
    {"__div", _wrap_Matrix___div}, 
    {"__mul", _wrap_Matrix___mul}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_Matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_Matrix_bases[] = {0};
static const char *swig_jvgs_math_Matrix_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_Matrix = { "Matrix", &SWIGTYPE_p_jvgs__math__Matrix,_wrap_new_Matrix, swig_delete_Matrix, swig_jvgs_math_Matrix_methods, swig_jvgs_math_Matrix_attributes, swig_jvgs_math_Matrix_bases, swig_jvgs_math_Matrix_base_names };

static int _wrap_new_Noise(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  int arg3 ;
  jvgs::math::Noise *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Noise",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::math::Noise",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::math::Noise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jvgs::math::Noise",3,"int");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (jvgs::math::Noise *)new jvgs::math::Noise(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Noise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_seed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Noise *arg1 = (jvgs::math::Noise *) 0 ;
  
  SWIG_check_num_args("seed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("seed",1,"jvgs::math::Noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Noise,0))){
    SWIG_fail_ptr("Noise_seed",1,SWIGTYPE_p_jvgs__math__Noise);
  }
  
  (arg1)->seed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Noise_nextValue(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Noise *arg1 = (jvgs::math::Noise *) 0 ;
  float result;
  
  SWIG_check_num_args("nextValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nextValue",1,"jvgs::math::Noise *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Noise,0))){
    SWIG_fail_ptr("Noise_nextValue",1,SWIGTYPE_p_jvgs__math__Noise);
  }
  
  result = (float)(arg1)->nextValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Noise(void *obj) {
jvgs::math::Noise *arg1 = (jvgs::math::Noise *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_Noise_methods[] = {
    {"seed", _wrap_Noise_seed}, 
    {"nextValue", _wrap_Noise_nextValue}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_Noise_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_Noise_bases[] = {0};
static const char *swig_jvgs_math_Noise_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_Noise = { "Noise", &SWIGTYPE_p_jvgs__math__Noise,_wrap_new_Noise, swig_delete_Noise, swig_jvgs_math_Noise_methods, swig_jvgs_math_Noise_attributes, swig_jvgs_math_Noise_bases, swig_jvgs_math_Noise_base_names };

static int _wrap_new_AffineTransformationMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::AffineTransformationMatrix",0,0)
  result = (jvgs::math::AffineTransformationMatrix *)new jvgs::math::AffineTransformationMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AffineTransformationMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  jvgs::math::AffineTransformationMatrix *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::AffineTransformationMatrix",6,6)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("jvgs::math::AffineTransformationMatrix",6,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  result = (jvgs::math::AffineTransformationMatrix *)new jvgs::math::AffineTransformationMatrix(arg1,arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AffineTransformationMatrix(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AffineTransformationMatrix__SWIG_0(L);
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_AffineTransformationMatrix__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_AffineTransformationMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::math::AffineTransformationMatrix()\n"
    "    jvgs::math::AffineTransformationMatrix(float,float,float,float,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_AffineTransformationMatrix___mul(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"jvgs::math::AffineTransformationMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix___mul",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("AffineTransformationMatrix___mul",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::AffineTransformationMatrix const *)arg1)->operator *((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_translate(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("translate",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("translate",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_translate",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_translate",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->translate((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_scale(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("scale",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_scale",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_scale",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->scale((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotate",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_rotate",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  float arg2 ;
  jvgs::math::Vector2D *arg3 = 0 ;
  
  SWIG_check_num_args("rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotate",2,"float");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("rotate",3,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_rotate",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_rotate",3,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->rotate(arg2,(jvgs::math::Vector2D const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__AffineTransformationMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AffineTransformationMatrix_rotate__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__AffineTransformationMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_AffineTransformationMatrix_rotate__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'AffineTransformationMatrix_rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rotate(jvgs::math::AffineTransformationMatrix *,float)\n"
    "    rotate(jvgs::math::AffineTransformationMatrix *,float,jvgs::math::Vector2D const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AffineTransformationMatrix_skewX(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("skewX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skewX",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("skewX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_skewX",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->skewX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AffineTransformationMatrix_skewY(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("skewY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skewY",1,"jvgs::math::AffineTransformationMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("skewY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("AffineTransformationMatrix_skewY",1,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->skewY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AffineTransformationMatrix(void *obj) {
jvgs::math::AffineTransformationMatrix *arg1 = (jvgs::math::AffineTransformationMatrix *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_AffineTransformationMatrix_methods[] = {
    {"__mul", _wrap_AffineTransformationMatrix___mul}, 
    {"translate", _wrap_AffineTransformationMatrix_translate}, 
    {"scale", _wrap_AffineTransformationMatrix_scale}, 
    {"rotate", _wrap_AffineTransformationMatrix_rotate}, 
    {"skewX", _wrap_AffineTransformationMatrix_skewX}, 
    {"skewY", _wrap_AffineTransformationMatrix_skewY}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_AffineTransformationMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_AffineTransformationMatrix_bases[] = {0,0};
static const char *swig_jvgs_math_AffineTransformationMatrix_base_names[] = {"jvgs::math::Matrix *",0};
static swig_lua_class _wrap_class_jvgs_math_AffineTransformationMatrix = { "AffineTransformationMatrix", &SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,_wrap_new_AffineTransformationMatrix, swig_delete_AffineTransformationMatrix, swig_jvgs_math_AffineTransformationMatrix_methods, swig_jvgs_math_AffineTransformationMatrix_attributes, swig_jvgs_math_AffineTransformationMatrix_bases, swig_jvgs_math_AffineTransformationMatrix_base_names };

static int _wrap_new_SegmentQuadTree(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< jvgs::math::LineSegment * > *arg1 = (std::vector< jvgs::math::LineSegment * > *) 0 ;
  jvgs::math::SegmentQuadTree *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::SegmentQuadTree",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::math::SegmentQuadTree",1,"std::vector< jvgs::math::LineSegment * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t,0))){
    SWIG_fail_ptr("new_SegmentQuadTree",1,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t);
  }
  
  result = (jvgs::math::SegmentQuadTree *)new jvgs::math::SegmentQuadTree(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__SegmentQuadTree,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SegmentQuadTree_findSegments(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::SegmentQuadTree *arg1 = (jvgs::math::SegmentQuadTree *) 0 ;
  BoundingBox *arg2 = (BoundingBox *) 0 ;
  std::vector< jvgs::math::LineSegment * > *arg3 = (std::vector< jvgs::math::LineSegment * > *) 0 ;
  
  SWIG_check_num_args("findSegments",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findSegments",1,"jvgs::math::SegmentQuadTree const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("findSegments",2,"BoundingBox *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("findSegments",3,"std::vector< jvgs::math::LineSegment * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__SegmentQuadTree,0))){
    SWIG_fail_ptr("SegmentQuadTree_findSegments",1,SWIGTYPE_p_jvgs__math__SegmentQuadTree);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BoundingBox,0))){
    SWIG_fail_ptr("SegmentQuadTree_findSegments",2,SWIGTYPE_p_BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t,0))){
    SWIG_fail_ptr("SegmentQuadTree_findSegments",3,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t);
  }
  
  ((jvgs::math::SegmentQuadTree const *)arg1)->findSegments(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SegmentQuadTree(void *obj) {
jvgs::math::SegmentQuadTree *arg1 = (jvgs::math::SegmentQuadTree *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_SegmentQuadTree_methods[] = {
    {"findSegments", _wrap_SegmentQuadTree_findSegments}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_SegmentQuadTree_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_SegmentQuadTree_bases[] = {0};
static const char *swig_jvgs_math_SegmentQuadTree_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_SegmentQuadTree = { "SegmentQuadTree", &SWIGTYPE_p_jvgs__math__SegmentQuadTree,_wrap_new_SegmentQuadTree, swig_delete_SegmentQuadTree, swig_jvgs_math_SegmentQuadTree_methods, swig_jvgs_math_SegmentQuadTree_attributes, swig_jvgs_math_SegmentQuadTree_bases, swig_jvgs_math_SegmentQuadTree_base_names };

static int _wrap_new_LineSegment(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::LineSegment *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::LineSegment",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::LineSegment",1,"jvgs::math::Vector2D const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::math::LineSegment",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_LineSegment",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_LineSegment",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (jvgs::math::LineSegment *)new jvgs::math::LineSegment((jvgs::math::Vector2D const &)*arg1,(jvgs::math::Vector2D const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__LineSegment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getStart(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getStart",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getStart",1,"jvgs::math::LineSegment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getStart",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::LineSegment const *)arg1)->getStart();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getEnd(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getEnd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnd",1,"jvgs::math::LineSegment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getEnd",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::LineSegment const *)arg1)->getEnd();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getLine(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  Line result;
  
  SWIG_check_num_args("getLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLine",1,"jvgs::math::LineSegment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getLine",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  result = ((jvgs::math::LineSegment const *)arg1)->getLine();
  {
    Line * resultptr = new Line((const Line &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Line,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  float result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"jvgs::math::LineSegment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getLength",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  result = (float)((jvgs::math::LineSegment const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  float arg2 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPoint",1,"jvgs::math::LineSegment const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPoint",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getPoint",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((jvgs::math::LineSegment const *)arg1)->getPoint(arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LineSegment_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) 0 ;
  BoundingBox *result = 0 ;
  
  SWIG_check_num_args("getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingBox",1,"jvgs::math::LineSegment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("LineSegment_getBoundingBox",1,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  result = (BoundingBox *)(arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LineSegment(void *obj) {
jvgs::math::LineSegment *arg1 = (jvgs::math::LineSegment *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_LineSegment_methods[] = {
    {"getStart", _wrap_LineSegment_getStart}, 
    {"getEnd", _wrap_LineSegment_getEnd}, 
    {"getLine", _wrap_LineSegment_getLine}, 
    {"getLength", _wrap_LineSegment_getLength}, 
    {"getPoint", _wrap_LineSegment_getPoint}, 
    {"getBoundingBox", _wrap_LineSegment_getBoundingBox}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_LineSegment_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_LineSegment_bases[] = {0,0};
static const char *swig_jvgs_math_LineSegment_base_names[] = {"jvgs::math::PathSegment *",0};
static swig_lua_class _wrap_class_jvgs_math_LineSegment = { "LineSegment", &SWIGTYPE_p_jvgs__math__LineSegment,_wrap_new_LineSegment, swig_delete_LineSegment, swig_jvgs_math_LineSegment_methods, swig_jvgs_math_LineSegment_attributes, swig_jvgs_math_LineSegment_bases, swig_jvgs_math_LineSegment_base_names };

static int _wrap_MathManager_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::MathManager::getInstance",0,0)
  result = (jvgs::math::MathManager *)jvgs::math::MathManager::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__MathManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_nearestPowerOfTwo(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("nearestPowerOfTwo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nearestPowerOfTwo",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nearestPowerOfTwo",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_nearestPowerOfTwo",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)((jvgs::math::MathManager const *)arg1)->nearestPowerOfTwo((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_newRandomSeed(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  
  SWIG_check_num_args("newRandomSeed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("newRandomSeed",1,"jvgs::math::MathManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_newRandomSeed",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  ((jvgs::math::MathManager const *)arg1)->newRandomSeed();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("randInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randInt",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randInt",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_randInt",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)((jvgs::math::MathManager const *)arg1)->randInt((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  int result;
  
  SWIG_check_num_args("randInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randInt",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randInt",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("randInt",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_randInt",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  result = (int)((jvgs::math::MathManager const *)arg1)->randInt((int const &)*arg2,(int const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randInt(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathManager_randInt__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MathManager_randInt__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MathManager_randInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randInt(jvgs::math::MathManager const *,int const &)\n"
    "    randInt(jvgs::math::MathManager const *,int const &,int const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MathManager_randFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  float result;
  
  SWIG_check_num_args("randFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randFloat",1,"jvgs::math::MathManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_randFloat",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  result = (float)((jvgs::math::MathManager const *)arg1)->randFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("randFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randFloat",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randFloat",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_randFloat",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)((jvgs::math::MathManager const *)arg1)->randFloat((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randFloat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  float temp2 ;
  float temp3 ;
  float result;
  
  SWIG_check_num_args("randFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("randFloat",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("randFloat",2,"float const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("randFloat",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_randFloat",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  result = (float)((jvgs::math::MathManager const *)arg1)->randFloat((float const &)*arg2,(float const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_randFloat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_MathManager_randFloat__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathManager_randFloat__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_MathManager_randFloat__SWIG_2(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MathManager_randFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    randFloat(jvgs::math::MathManager const *)\n"
    "    randFloat(jvgs::math::MathManager const *,float const &)\n"
    "    randFloat(jvgs::math::MathManager const *,float const &,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MathManager_min(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  int result;
  
  SWIG_check_num_args("min",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("min",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("min",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("min",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_min",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  result = (int)((jvgs::math::MathManager const *)arg1)->min((int const &)*arg2,(int const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_max(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int temp2 ;
  int temp3 ;
  int result;
  
  SWIG_check_num_args("max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("max",2,"int const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("max",3,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_max",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  temp3=(int)lua_tonumber(L,3); arg3=&temp3;
  result = (int)((jvgs::math::MathManager const *)arg1)->max((int const &)*arg2,(int const &)*arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_abs__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  SWIG_check_num_args("abs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("abs",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("abs",2,"int const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_abs",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(int)lua_tonumber(L,2); arg2=&temp2;
  result = (int)((jvgs::math::MathManager const *)arg1)->abs((int const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_abs__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  float *arg2 = 0 ;
  float temp2 ;
  float result;
  
  SWIG_check_num_args("abs",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("abs",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("abs",2,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_abs",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  temp2=(float)lua_tonumber(L,2); arg2=&temp2;
  result = (float)((jvgs::math::MathManager const *)arg1)->abs((float const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MathManager_abs(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathManager_abs__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__MathManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_MathManager_abs__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'MathManager_abs'\n"
    "  Possible C/C++ prototypes are:\n"
    "    abs(jvgs::math::MathManager const *,int const &)\n"
    "    abs(jvgs::math::MathManager const *,float const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MathManager_getLowestPositiveRoot(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::MathManager *arg1 = (jvgs::math::MathManager *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float *arg6 = (float *) 0 ;
  bool result;
  
  SWIG_check_num_args("getLowestPositiveRoot",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLowestPositiveRoot",1,"jvgs::math::MathManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getLowestPositiveRoot",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getLowestPositiveRoot",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getLowestPositiveRoot",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getLowestPositiveRoot",5,"float");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("getLowestPositiveRoot",6,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__MathManager,0))){
    SWIG_fail_ptr("MathManager_getLowestPositiveRoot",1,SWIGTYPE_p_jvgs__math__MathManager);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("MathManager_getLowestPositiveRoot",6,SWIGTYPE_p_float);
  }
  
  result = (bool)((jvgs::math::MathManager const *)arg1)->getLowestPositiveRoot(arg2,arg3,arg4,arg5,arg6);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static swig_lua_method swig_jvgs_math_MathManager_methods[] = {
    {"nearestPowerOfTwo", _wrap_MathManager_nearestPowerOfTwo}, 
    {"newRandomSeed", _wrap_MathManager_newRandomSeed}, 
    {"randInt", _wrap_MathManager_randInt}, 
    {"randFloat", _wrap_MathManager_randFloat}, 
    {"min", _wrap_MathManager_min}, 
    {"max", _wrap_MathManager_max}, 
    {"abs", _wrap_MathManager_abs}, 
    {"getLowestPositiveRoot", _wrap_MathManager_getLowestPositiveRoot}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_MathManager_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_MathManager_bases[] = {0};
static const char *swig_jvgs_math_MathManager_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_MathManager = { "MathManager", &SWIGTYPE_p_jvgs__math__MathManager,0,0, swig_jvgs_math_MathManager_methods, swig_jvgs_math_MathManager_attributes, swig_jvgs_math_MathManager_bases, swig_jvgs_math_MathManager_base_names };

static int _wrap_new_Line__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D arg1 ;
  jvgs::math::Vector2D arg2 ;
  jvgs::math::Vector2D *argp1 ;
  jvgs::math::Vector2D *argp2 ;
  jvgs::math::Line *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Line",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::Line",1,"jvgs::math::Vector2D");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::math::Line",2,"jvgs::math::Vector2D");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_Line",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  arg1 = *argp1;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_Line",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  arg2 = *argp2;
  
  result = (jvgs::math::Line *)new jvgs::math::Line(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D arg1 ;
  jvgs::math::Vector2D *argp1 ;
  jvgs::math::Line *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Line",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::Line",1,"jvgs::math::Vector2D");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_Line",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  arg1 = *argp1;
  
  result = (jvgs::math::Line *)new jvgs::math::Line(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::Line",0,0)
  result = (jvgs::math::Line *)new jvgs::math::Line();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Line,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Line(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Line__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Line__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Line__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Line'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::math::Line(jvgs::math::Vector2D,jvgs::math::Vector2D)\n"
    "    jvgs::math::Line(jvgs::math::Vector2D)\n"
    "    jvgs::math::Line()\n");
  lua_error(L);return 0;
}


static int _wrap_Line_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPoint",1,"jvgs::math::Line const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getPoint",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::Line const *)arg1)->getPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getVector(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVector",1,"jvgs::math::Line const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getVector",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::Line const *)arg1)->getVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getNormal(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("getNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"jvgs::math::Line const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getNormal",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  result = ((jvgs::math::Line const *)arg1)->getNormal();
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getClosestPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("getClosestPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getClosestPoint",1,"jvgs::math::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getClosestPoint",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getClosestPoint",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Line_getClosestPoint",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::math::Line const *)arg1)->getClosestPoint((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getDistance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("getDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDistance",1,"jvgs::math::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getDistance",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getDistance",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Line_getDistance",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Line const *)arg1)->getDistance((jvgs::math::Vector2D const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Line_getSignedDistance(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Line *arg1 = (jvgs::math::Line *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("getSignedDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSignedDistance",1,"jvgs::math::Line const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getSignedDistance",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Line,0))){
    SWIG_fail_ptr("Line_getSignedDistance",1,SWIGTYPE_p_jvgs__math__Line);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Line_getSignedDistance",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (float)((jvgs::math::Line const *)arg1)->getSignedDistance((jvgs::math::Vector2D const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Line(void *obj) {
jvgs::math::Line *arg1 = (jvgs::math::Line *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_Line_methods[] = {
    {"getPoint", _wrap_Line_getPoint}, 
    {"getVector", _wrap_Line_getVector}, 
    {"getNormal", _wrap_Line_getNormal}, 
    {"getClosestPoint", _wrap_Line_getClosestPoint}, 
    {"getDistance", _wrap_Line_getDistance}, 
    {"getSignedDistance", _wrap_Line_getSignedDistance}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_Line_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_Line_bases[] = {0};
static const char *swig_jvgs_math_Line_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_Line = { "Line", &SWIGTYPE_p_jvgs__math__Line,_wrap_new_Line, swig_delete_Line, swig_jvgs_math_Line_methods, swig_jvgs_math_Line_attributes, swig_jvgs_math_Line_bases, swig_jvgs_math_Line_base_names };

static int _wrap_new_SegmentQuadTreeNode(lua_State* L) {
  int SWIG_arg = 0;
  BoundingBox *arg1 = 0 ;
  jvgs::math::SegmentQuadTreeNode *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::SegmentQuadTreeNode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::SegmentQuadTreeNode",1,"BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_BoundingBox,0))){
    SWIG_fail_ptr("new_SegmentQuadTreeNode",1,SWIGTYPE_p_BoundingBox);
  }
  
  result = (jvgs::math::SegmentQuadTreeNode *)new jvgs::math::SegmentQuadTreeNode((BoundingBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SegmentQuadTreeNode_getBoundingBox(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::SegmentQuadTreeNode *arg1 = (jvgs::math::SegmentQuadTreeNode *) 0 ;
  BoundingBox *result = 0 ;
  
  SWIG_check_num_args("getBoundingBox",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingBox",1,"jvgs::math::SegmentQuadTreeNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_getBoundingBox",1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode);
  }
  
  result = (BoundingBox *) &((jvgs::math::SegmentQuadTreeNode const *)arg1)->getBoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SegmentQuadTreeNode_addSegment(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::SegmentQuadTreeNode *arg1 = (jvgs::math::SegmentQuadTreeNode *) 0 ;
  jvgs::math::LineSegment *arg2 = (jvgs::math::LineSegment *) 0 ;
  
  SWIG_check_num_args("addSegment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSegment",1,"jvgs::math::SegmentQuadTreeNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addSegment",2,"jvgs::math::LineSegment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_addSegment",1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__LineSegment,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_addSegment",2,SWIGTYPE_p_jvgs__math__LineSegment);
  }
  
  (arg1)->addSegment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SegmentQuadTreeNode_subdivide(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::SegmentQuadTreeNode *arg1 = (jvgs::math::SegmentQuadTreeNode *) 0 ;
  
  SWIG_check_num_args("subdivide",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("subdivide",1,"jvgs::math::SegmentQuadTreeNode *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_subdivide",1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode);
  }
  
  (arg1)->subdivide();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SegmentQuadTreeNode_findSegments(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::SegmentQuadTreeNode *arg1 = (jvgs::math::SegmentQuadTreeNode *) 0 ;
  BoundingBox *arg2 = (BoundingBox *) 0 ;
  std::vector< jvgs::math::LineSegment * > *arg3 = (std::vector< jvgs::math::LineSegment * > *) 0 ;
  
  SWIG_check_num_args("findSegments",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findSegments",1,"jvgs::math::SegmentQuadTreeNode *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("findSegments",2,"BoundingBox *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("findSegments",3,"std::vector< jvgs::math::LineSegment * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_findSegments",1,SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_BoundingBox,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_findSegments",2,SWIGTYPE_p_BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t,0))){
    SWIG_fail_ptr("SegmentQuadTreeNode_findSegments",3,SWIGTYPE_p_std__vectorT_jvgs__math__LineSegment_p_t);
  }
  
  (arg1)->findSegments(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SegmentQuadTreeNode(void *obj) {
jvgs::math::SegmentQuadTreeNode *arg1 = (jvgs::math::SegmentQuadTreeNode *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_SegmentQuadTreeNode_methods[] = {
    {"getBoundingBox", _wrap_SegmentQuadTreeNode_getBoundingBox}, 
    {"addSegment", _wrap_SegmentQuadTreeNode_addSegment}, 
    {"subdivide", _wrap_SegmentQuadTreeNode_subdivide}, 
    {"findSegments", _wrap_SegmentQuadTreeNode_findSegments}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_SegmentQuadTreeNode_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_SegmentQuadTreeNode_bases[] = {0};
static const char *swig_jvgs_math_SegmentQuadTreeNode_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_SegmentQuadTreeNode = { "SegmentQuadTreeNode", &SWIGTYPE_p_jvgs__math__SegmentQuadTreeNode,_wrap_new_SegmentQuadTreeNode, swig_delete_SegmentQuadTreeNode, swig_jvgs_math_SegmentQuadTreeNode_methods, swig_jvgs_math_SegmentQuadTreeNode_attributes, swig_jvgs_math_SegmentQuadTreeNode_bases, swig_jvgs_math_SegmentQuadTreeNode_base_names };

static int _wrap_new_BoundingBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::BoundingBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::BoundingBox",1,"jvgs::math::Vector2D const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::math::BoundingBox",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_BoundingBox",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_BoundingBox",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (jvgs::math::BoundingBox *)new jvgs::math::BoundingBox((jvgs::math::Vector2D const &)*arg1,(jvgs::math::Vector2D const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = 0 ;
  jvgs::math::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::BoundingBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::BoundingBox",1,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_BoundingBox",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (jvgs::math::BoundingBox *)new jvgs::math::BoundingBox((jvgs::math::Vector2D const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::BoundingBox",0,0)
  result = (jvgs::math::BoundingBox *)new jvgs::math::BoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *arg1 = 0 ;
  jvgs::math::BoundingBox *arg2 = 0 ;
  jvgs::math::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::BoundingBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::BoundingBox",1,"jvgs::math::BoundingBox const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::math::BoundingBox",2,"jvgs::math::BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("new_BoundingBox",1,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("new_BoundingBox",2,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  result = (jvgs::math::BoundingBox *)new jvgs::math::BoundingBox((jvgs::math::BoundingBox const &)*arg1,(jvgs::math::BoundingBox const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BoundingBox__SWIG_2(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BoundingBox__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jvgs__math__Vector2D, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BoundingBox__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_jvgs__math__BoundingBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_jvgs__math__BoundingBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BoundingBox__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_BoundingBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    jvgs::math::BoundingBox(jvgs::math::Vector2D const &,jvgs::math::Vector2D const &)\n"
    "    jvgs::math::BoundingBox(jvgs::math::Vector2D const &)\n"
    "    jvgs::math::BoundingBox()\n"
    "    jvgs::math::BoundingBox(jvgs::math::BoundingBox const &,jvgs::math::BoundingBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoundingBox_getTopLeft(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *arg1 = (jvgs::math::BoundingBox *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getTopLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTopLeft",1,"jvgs::math::BoundingBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_getTopLeft",1,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::BoundingBox const *)arg1)->getTopLeft();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_getBottomRight(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *arg1 = (jvgs::math::BoundingBox *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getBottomRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBottomRight",1,"jvgs::math::BoundingBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_getBottomRight",1,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::math::BoundingBox const *)arg1)->getBottomRight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_intersectsWith(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *arg1 = (jvgs::math::BoundingBox *) 0 ;
  jvgs::math::BoundingBox *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersectsWith",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersectsWith",1,"jvgs::math::BoundingBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersectsWith",2,"jvgs::math::BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_intersectsWith",1,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_intersectsWith",2,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  result = (bool)((jvgs::math::BoundingBox const *)arg1)->intersectsWith((jvgs::math::BoundingBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_completelyIn(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::BoundingBox *arg1 = (jvgs::math::BoundingBox *) 0 ;
  jvgs::math::BoundingBox *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("completelyIn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("completelyIn",1,"jvgs::math::BoundingBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("completelyIn",2,"jvgs::math::BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_completelyIn",1,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_completelyIn",2,SWIGTYPE_p_jvgs__math__BoundingBox);
  }
  
  result = (bool)((jvgs::math::BoundingBox const *)arg1)->completelyIn((jvgs::math::BoundingBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BoundingBox(void *obj) {
jvgs::math::BoundingBox *arg1 = (jvgs::math::BoundingBox *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_BoundingBox_methods[] = {
    {"getTopLeft", _wrap_BoundingBox_getTopLeft}, 
    {"getBottomRight", _wrap_BoundingBox_getBottomRight}, 
    {"intersectsWith", _wrap_BoundingBox_intersectsWith}, 
    {"completelyIn", _wrap_BoundingBox_completelyIn}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_BoundingBox_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_BoundingBox_bases[] = {0};
static const char *swig_jvgs_math_BoundingBox_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_math_BoundingBox = { "BoundingBox", &SWIGTYPE_p_jvgs__math__BoundingBox,_wrap_new_BoundingBox, swig_delete_BoundingBox, swig_jvgs_math_BoundingBox_methods, swig_jvgs_math_BoundingBox_attributes, swig_jvgs_math_BoundingBox_bases, swig_jvgs_math_BoundingBox_base_names };

static int _wrap_new_CubicCurve(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::Vector2D *arg1 = 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D *arg3 = 0 ;
  jvgs::math::Vector2D *arg4 = 0 ;
  jvgs::math::CubicCurve *result = 0 ;
  
  SWIG_check_num_args("jvgs::math::CubicCurve",4,4)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("jvgs::math::CubicCurve",1,"jvgs::math::Vector2D const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("jvgs::math::CubicCurve",2,"jvgs::math::Vector2D const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("jvgs::math::CubicCurve",3,"jvgs::math::Vector2D const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("jvgs::math::CubicCurve",4,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_CubicCurve",1,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_CubicCurve",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_CubicCurve",3,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("new_CubicCurve",4,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = (jvgs::math::CubicCurve *)new jvgs::math::CubicCurve((jvgs::math::Vector2D const &)*arg1,(jvgs::math::Vector2D const &)*arg2,(jvgs::math::Vector2D const &)*arg3,(jvgs::math::Vector2D const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__CubicCurve,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicCurve_getLength(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::CubicCurve *arg1 = (jvgs::math::CubicCurve *) 0 ;
  float result;
  
  SWIG_check_num_args("getLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLength",1,"jvgs::math::CubicCurve const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__CubicCurve,0))){
    SWIG_fail_ptr("CubicCurve_getLength",1,SWIGTYPE_p_jvgs__math__CubicCurve);
  }
  
  result = (float)((jvgs::math::CubicCurve const *)arg1)->getLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CubicCurve_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::math::CubicCurve *arg1 = (jvgs::math::CubicCurve *) 0 ;
  float arg2 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPoint",1,"jvgs::math::CubicCurve const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPoint",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__math__CubicCurve,0))){
    SWIG_fail_ptr("CubicCurve_getPoint",1,SWIGTYPE_p_jvgs__math__CubicCurve);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((jvgs::math::CubicCurve const *)arg1)->getPoint(arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CubicCurve(void *obj) {
jvgs::math::CubicCurve *arg1 = (jvgs::math::CubicCurve *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_math_CubicCurve_methods[] = {
    {"getLength", _wrap_CubicCurve_getLength}, 
    {"getPoint", _wrap_CubicCurve_getPoint}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_math_CubicCurve_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_math_CubicCurve_bases[] = {0,0};
static const char *swig_jvgs_math_CubicCurve_base_names[] = {"jvgs::math::PathSegment *",0};
static swig_lua_class _wrap_class_jvgs_math_CubicCurve = { "CubicCurve", &SWIGTYPE_p_jvgs__math__CubicCurve,_wrap_new_CubicCurve, swig_delete_CubicCurve, swig_jvgs_math_CubicCurve_methods, swig_jvgs_math_CubicCurve_attributes, swig_jvgs_math_CubicCurve_bases, swig_jvgs_math_CubicCurve_base_names };

static int _wrap_new_GroupParser(lua_State* L) {
  int SWIG_arg = 0;
  Parser *arg1 = (Parser *) 0 ;
  jvgs::sketch::GroupParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::GroupParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::GroupParser",1,"Parser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parser,0))){
    SWIG_fail_ptr("new_GroupParser",1,SWIGTYPE_p_Parser);
  }
  
  result = (jvgs::sketch::GroupParser *)new jvgs::sketch::GroupParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__GroupParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GroupParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::GroupParser *arg1 = (jvgs::sketch::GroupParser *) 0 ;
  SketchElement *arg2 = (SketchElement *) 0 ;
  TiXmlElement *arg3 = (TiXmlElement *) 0 ;
  SketchElement *result = 0 ;
  
  SWIG_check_num_args("parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::GroupParser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"SketchElement *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("parse",3,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__GroupParser,0))){
    SWIG_fail_ptr("GroupParser_parse",1,SWIGTYPE_p_jvgs__sketch__GroupParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SketchElement,0))){
    SWIG_fail_ptr("GroupParser_parse",2,SWIGTYPE_p_SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("GroupParser_parse",3,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (SketchElement *)(arg1)->parse(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GroupParser(void *obj) {
jvgs::sketch::GroupParser *arg1 = (jvgs::sketch::GroupParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_GroupParser_methods[] = {
    {"parse", _wrap_GroupParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_GroupParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_GroupParser_bases[] = {0};
static const char *swig_jvgs_sketch_GroupParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_GroupParser = { "GroupParser", &SWIGTYPE_p_jvgs__sketch__GroupParser,_wrap_new_GroupParser, swig_delete_GroupParser, swig_jvgs_sketch_GroupParser_methods, swig_jvgs_sketch_GroupParser_attributes, swig_jvgs_sketch_GroupParser_bases, swig_jvgs_sketch_GroupParser_base_names };

static int _wrap_new_PathParser(lua_State* L) {
  int SWIG_arg = 0;
  Parser *arg1 = (Parser *) 0 ;
  jvgs::sketch::PathParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::PathParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::PathParser",1,"Parser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Parser,0))){
    SWIG_fail_ptr("new_PathParser",1,SWIGTYPE_p_Parser);
  }
  
  result = (jvgs::sketch::PathParser *)new jvgs::sketch::PathParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathParser *arg1 = (jvgs::sketch::PathParser *) 0 ;
  SketchElement *arg2 = (SketchElement *) 0 ;
  TiXmlElement *arg3 = (TiXmlElement *) 0 ;
  SketchElement *result = 0 ;
  
  SWIG_check_num_args("parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::PathParser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"SketchElement *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("parse",3,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathParser,0))){
    SWIG_fail_ptr("PathParser_parse",1,SWIGTYPE_p_jvgs__sketch__PathParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_SketchElement,0))){
    SWIG_fail_ptr("PathParser_parse",2,SWIGTYPE_p_SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("PathParser_parse",3,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (SketchElement *)(arg1)->parse(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathParser(void *obj) {
jvgs::sketch::PathParser *arg1 = (jvgs::sketch::PathParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_PathParser_methods[] = {
    {"parse", _wrap_PathParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_PathParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_PathParser_bases[] = {0};
static const char *swig_jvgs_sketch_PathParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_PathParser = { "PathParser", &SWIGTYPE_p_jvgs__sketch__PathParser,_wrap_new_PathParser, swig_delete_PathParser, swig_jvgs_sketch_PathParser_methods, swig_jvgs_sketch_PathParser_attributes, swig_jvgs_sketch_PathParser_bases, swig_jvgs_sketch_PathParser_base_names };

static int _wrap_new_CPathCommandParser(lua_State* L) {
  int SWIG_arg = 0;
  PathDataParser *arg1 = (PathDataParser *) 0 ;
  jvgs::sketch::CPathCommandParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::CPathCommandParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::CPathCommandParser",1,"PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PathDataParser,0))){
    SWIG_fail_ptr("new_CPathCommandParser",1,SWIGTYPE_p_PathDataParser);
  }
  
  result = (jvgs::sketch::CPathCommandParser *)new jvgs::sketch::CPathCommandParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__CPathCommandParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CPathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::CPathCommandParser *arg1 = (jvgs::sketch::CPathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::CPathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__CPathCommandParser,0))){
    SWIG_fail_ptr("CPathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__CPathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("CPathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("CPathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::CPathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CPathCommandParser(void *obj) {
jvgs::sketch::CPathCommandParser *arg1 = (jvgs::sketch::CPathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_CPathCommandParser_methods[] = {
    {"parse", _wrap_CPathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_CPathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_CPathCommandParser_bases[] = {0};
static const char *swig_jvgs_sketch_CPathCommandParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_CPathCommandParser = { "CPathCommandParser", &SWIGTYPE_p_jvgs__sketch__CPathCommandParser,_wrap_new_CPathCommandParser, swig_delete_CPathCommandParser, swig_jvgs_sketch_CPathCommandParser_methods, swig_jvgs_sketch_CPathCommandParser_attributes, swig_jvgs_sketch_CPathCommandParser_bases, swig_jvgs_sketch_CPathCommandParser_base_names };

static int _wrap_PathCommandParser_getDataParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathCommandParser *arg1 = (jvgs::sketch::PathCommandParser *) 0 ;
  jvgs::sketch::PathDataParser *result = 0 ;
  
  SWIG_check_num_args("getDataParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDataParser",1,"jvgs::sketch::PathCommandParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathCommandParser,0))){
    SWIG_fail_ptr("PathCommandParser_getDataParser",1,SWIGTYPE_p_jvgs__sketch__PathCommandParser);
  }
  
  result = (jvgs::sketch::PathDataParser *)((jvgs::sketch::PathCommandParser const *)arg1)->getDataParser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathDataParser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathCommandParser *arg1 = (jvgs::sketch::PathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::PathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathCommandParser,0))){
    SWIG_fail_ptr("PathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__PathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("PathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("PathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::PathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathCommandParser(void *obj) {
jvgs::sketch::PathCommandParser *arg1 = (jvgs::sketch::PathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_PathCommandParser_methods[] = {
    {"getDataParser", _wrap_PathCommandParser_getDataParser}, 
    {"parse", _wrap_PathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_PathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_PathCommandParser_bases[] = {0};
static const char *swig_jvgs_sketch_PathCommandParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_PathCommandParser = { "PathCommandParser", &SWIGTYPE_p_jvgs__sketch__PathCommandParser,0, swig_delete_PathCommandParser, swig_jvgs_sketch_PathCommandParser_methods, swig_jvgs_sketch_PathCommandParser_attributes, swig_jvgs_sketch_PathCommandParser_bases, swig_jvgs_sketch_PathCommandParser_base_names };

static int _wrap_new_PathComponent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  jvgs::sketch::PathComponent *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::PathComponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::PathComponent",1,"jvgs::sketch::Path *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("new_PathComponent",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  result = (jvgs::sketch::PathComponent *)new jvgs::sketch::PathComponent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathComponent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathComponent_getPath(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) 0 ;
  jvgs::sketch::Path *result = 0 ;
  
  SWIG_check_num_args("getPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPath",1,"jvgs::sketch::PathComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathComponent_getPath",1,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  result = (jvgs::sketch::Path *)((jvgs::sketch::PathComponent const *)arg1)->getPath();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Path,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathComponent_getNumberOfSegments(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) 0 ;
  int result;
  
  SWIG_check_num_args("getNumberOfSegments",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumberOfSegments",1,"jvgs::sketch::PathComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathComponent_getNumberOfSegments",1,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  result = (int)((jvgs::sketch::PathComponent const *)arg1)->getNumberOfSegments();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathComponent_getSegment(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) 0 ;
  int arg2 ;
  jvgs::math::PathSegment *result = 0 ;
  
  SWIG_check_num_args("getSegment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSegment",1,"jvgs::sketch::PathComponent const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSegment",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathComponent_getSegment",1,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (jvgs::math::PathSegment *)((jvgs::sketch::PathComponent const *)arg1)->getSegment(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__PathSegment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathComponent_addSegment(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) 0 ;
  jvgs::math::PathSegment *arg2 = (jvgs::math::PathSegment *) 0 ;
  
  SWIG_check_num_args("addSegment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSegment",1,"jvgs::sketch::PathComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addSegment",2,"jvgs::math::PathSegment *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathComponent_addSegment",1,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__PathSegment,0))){
    SWIG_fail_ptr("PathComponent_addSegment",2,SWIGTYPE_p_jvgs__math__PathSegment);
  }
  
  (arg1)->addSegment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathComponent_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) 0 ;
  jvgs::video::Renderer *arg2 = (jvgs::video::Renderer *) 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::PathComponent const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("render",2,"jvgs::video::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathComponent_render",1,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("PathComponent_render",2,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  ((jvgs::sketch::PathComponent const *)arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathComponent(void *obj) {
jvgs::sketch::PathComponent *arg1 = (jvgs::sketch::PathComponent *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_PathComponent_methods[] = {
    {"getPath", _wrap_PathComponent_getPath}, 
    {"getNumberOfSegments", _wrap_PathComponent_getNumberOfSegments}, 
    {"getSegment", _wrap_PathComponent_getSegment}, 
    {"addSegment", _wrap_PathComponent_addSegment}, 
    {"render", _wrap_PathComponent_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_PathComponent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_PathComponent_bases[] = {0};
static const char *swig_jvgs_sketch_PathComponent_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_PathComponent = { "PathComponent", &SWIGTYPE_p_jvgs__sketch__PathComponent,_wrap_new_PathComponent, swig_delete_PathComponent, swig_jvgs_sketch_PathComponent_methods, swig_jvgs_sketch_PathComponent_attributes, swig_jvgs_sketch_PathComponent_bases, swig_jvgs_sketch_PathComponent_base_names };

static int _wrap_new_ScaleTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::ScaleTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::ScaleTransformCommand",0,0)
  result = (jvgs::sketch::ScaleTransformCommand *)new jvgs::sketch::ScaleTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__ScaleTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ScaleTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::ScaleTransformCommand *arg1 = (jvgs::sketch::ScaleTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::ScaleTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__ScaleTransformCommand,0))){
    SWIG_fail_ptr("ScaleTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__ScaleTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("ScaleTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("ScaleTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::ScaleTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScaleTransformCommand(void *obj) {
jvgs::sketch::ScaleTransformCommand *arg1 = (jvgs::sketch::ScaleTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_ScaleTransformCommand_methods[] = {
    {"apply", _wrap_ScaleTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_ScaleTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_ScaleTransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_ScaleTransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_ScaleTransformCommand = { "ScaleTransformCommand", &SWIGTYPE_p_jvgs__sketch__ScaleTransformCommand,_wrap_new_ScaleTransformCommand, swig_delete_ScaleTransformCommand, swig_jvgs_sketch_ScaleTransformCommand_methods, swig_jvgs_sketch_ScaleTransformCommand_attributes, swig_jvgs_sketch_ScaleTransformCommand_bases, swig_jvgs_sketch_ScaleTransformCommand_base_names };

static int _wrap_SketchElementRenderer_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElementRenderer *arg1 = (jvgs::sketch::SketchElementRenderer *) 0 ;
  
  SWIG_check_num_args("render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::SketchElementRenderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElementRenderer,0))){
    SWIG_fail_ptr("SketchElementRenderer_render",1,SWIGTYPE_p_jvgs__sketch__SketchElementRenderer);
  }
  
  (arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SketchElementRenderer(void *obj) {
jvgs::sketch::SketchElementRenderer *arg1 = (jvgs::sketch::SketchElementRenderer *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SketchElementRenderer_methods[] = {
    {"render", _wrap_SketchElementRenderer_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SketchElementRenderer_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SketchElementRenderer_bases[] = {0};
static const char *swig_jvgs_sketch_SketchElementRenderer_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_SketchElementRenderer = { "SketchElementRenderer", &SWIGTYPE_p_jvgs__sketch__SketchElementRenderer,0, swig_delete_SketchElementRenderer, swig_jvgs_sketch_SketchElementRenderer_methods, swig_jvgs_sketch_SketchElementRenderer_attributes, swig_jvgs_sketch_SketchElementRenderer_bases, swig_jvgs_sketch_SketchElementRenderer_base_names };

static int _wrap_SketchElementParser_getParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElementParser *arg1 = (jvgs::sketch::SketchElementParser *) 0 ;
  jvgs::sketch::Parser *result = 0 ;
  
  SWIG_check_num_args("getParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParser",1,"jvgs::sketch::SketchElementParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElementParser,0))){
    SWIG_fail_ptr("SketchElementParser_getParser",1,SWIGTYPE_p_jvgs__sketch__SketchElementParser);
  }
  
  result = (jvgs::sketch::Parser *)((jvgs::sketch::SketchElementParser const *)arg1)->getParser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Parser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElementParser_parseAttributes(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElementParser *arg1 = (jvgs::sketch::SketchElementParser *) 0 ;
  jvgs::sketch::SketchElement *arg2 = (jvgs::sketch::SketchElement *) 0 ;
  TiXmlElement *arg3 = (TiXmlElement *) 0 ;
  
  SWIG_check_num_args("parseAttributes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parseAttributes",1,"jvgs::sketch::SketchElementParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parseAttributes",2,"jvgs::sketch::SketchElement *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("parseAttributes",3,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElementParser,0))){
    SWIG_fail_ptr("SketchElementParser_parseAttributes",1,SWIGTYPE_p_jvgs__sketch__SketchElementParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElementParser_parseAttributes",2,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("SketchElementParser_parseAttributes",3,SWIGTYPE_p_TiXmlElement);
  }
  
  ((jvgs::sketch::SketchElementParser const *)arg1)->parseAttributes(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElementParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElementParser *arg1 = (jvgs::sketch::SketchElementParser *) 0 ;
  jvgs::sketch::SketchElement *arg2 = (jvgs::sketch::SketchElement *) 0 ;
  TiXmlElement *arg3 = (TiXmlElement *) 0 ;
  jvgs::sketch::SketchElement *result = 0 ;
  
  SWIG_check_num_args("parse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::SketchElementParser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::SketchElement *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("parse",3,"TiXmlElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElementParser,0))){
    SWIG_fail_ptr("SketchElementParser_parse",1,SWIGTYPE_p_jvgs__sketch__SketchElementParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElementParser_parse",2,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TiXmlElement,0))){
    SWIG_fail_ptr("SketchElementParser_parse",3,SWIGTYPE_p_TiXmlElement);
  }
  
  result = (jvgs::sketch::SketchElement *)(arg1)->parse(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SketchElementParser(void *obj) {
jvgs::sketch::SketchElementParser *arg1 = (jvgs::sketch::SketchElementParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SketchElementParser_methods[] = {
    {"getParser", _wrap_SketchElementParser_getParser}, 
    {"parseAttributes", _wrap_SketchElementParser_parseAttributes}, 
    {"parse", _wrap_SketchElementParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SketchElementParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SketchElementParser_bases[] = {0};
static const char *swig_jvgs_sketch_SketchElementParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_SketchElementParser = { "SketchElementParser", &SWIGTYPE_p_jvgs__sketch__SketchElementParser,0, swig_delete_SketchElementParser, swig_jvgs_sketch_SketchElementParser_methods, swig_jvgs_sketch_SketchElementParser_attributes, swig_jvgs_sketch_SketchElementParser_bases, swig_jvgs_sketch_SketchElementParser_base_names };

static int _wrap_new_MPathCommandParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::MPathCommandParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::MPathCommandParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::MPathCommandParser",1,"jvgs::sketch::PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("new_MPathCommandParser",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::sketch::MPathCommandParser *)new jvgs::sketch::MPathCommandParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__MPathCommandParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MPathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::MPathCommandParser *arg1 = (jvgs::sketch::MPathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::MPathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__MPathCommandParser,0))){
    SWIG_fail_ptr("MPathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__MPathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("MPathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MPathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::MPathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MPathCommandParser(void *obj) {
jvgs::sketch::MPathCommandParser *arg1 = (jvgs::sketch::MPathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_MPathCommandParser_methods[] = {
    {"parse", _wrap_MPathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_MPathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_MPathCommandParser_bases[] = {0,0};
static const char *swig_jvgs_sketch_MPathCommandParser_base_names[] = {"jvgs::sketch::PathCommandParser *",0};
static swig_lua_class _wrap_class_jvgs_sketch_MPathCommandParser = { "MPathCommandParser", &SWIGTYPE_p_jvgs__sketch__MPathCommandParser,_wrap_new_MPathCommandParser, swig_delete_MPathCommandParser, swig_jvgs_sketch_MPathCommandParser_methods, swig_jvgs_sketch_MPathCommandParser_attributes, swig_jvgs_sketch_MPathCommandParser_bases, swig_jvgs_sketch_MPathCommandParser_base_names };

static int _wrap_new_SkewXTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SkewXTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::SkewXTransformCommand",0,0)
  result = (jvgs::sketch::SkewXTransformCommand *)new jvgs::sketch::SkewXTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SkewXTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkewXTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SkewXTransformCommand *arg1 = (jvgs::sketch::SkewXTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::SkewXTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SkewXTransformCommand,0))){
    SWIG_fail_ptr("SkewXTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__SkewXTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("SkewXTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SkewXTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::SkewXTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkewXTransformCommand(void *obj) {
jvgs::sketch::SkewXTransformCommand *arg1 = (jvgs::sketch::SkewXTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SkewXTransformCommand_methods[] = {
    {"apply", _wrap_SkewXTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SkewXTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SkewXTransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_SkewXTransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_SkewXTransformCommand = { "SkewXTransformCommand", &SWIGTYPE_p_jvgs__sketch__SkewXTransformCommand,_wrap_new_SkewXTransformCommand, swig_delete_SkewXTransformCommand, swig_jvgs_sketch_SkewXTransformCommand_methods, swig_jvgs_sketch_SkewXTransformCommand_attributes, swig_jvgs_sketch_SkewXTransformCommand_bases, swig_jvgs_sketch_SkewXTransformCommand_base_names };

static int _wrap_new_LPathCommandParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::LPathCommandParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::LPathCommandParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::LPathCommandParser",1,"jvgs::sketch::PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("new_LPathCommandParser",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::sketch::LPathCommandParser *)new jvgs::sketch::LPathCommandParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__LPathCommandParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LPathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::LPathCommandParser *arg1 = (jvgs::sketch::LPathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::LPathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__LPathCommandParser,0))){
    SWIG_fail_ptr("LPathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__LPathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("LPathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("LPathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::LPathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LPathCommandParser(void *obj) {
jvgs::sketch::LPathCommandParser *arg1 = (jvgs::sketch::LPathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_LPathCommandParser_methods[] = {
    {"parse", _wrap_LPathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_LPathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_LPathCommandParser_bases[] = {0,0};
static const char *swig_jvgs_sketch_LPathCommandParser_base_names[] = {"jvgs::sketch::PathCommandParser *",0};
static swig_lua_class _wrap_class_jvgs_sketch_LPathCommandParser = { "LPathCommandParser", &SWIGTYPE_p_jvgs__sketch__LPathCommandParser,_wrap_new_LPathCommandParser, swig_delete_LPathCommandParser, swig_jvgs_sketch_LPathCommandParser_methods, swig_jvgs_sketch_LPathCommandParser_attributes, swig_jvgs_sketch_LPathCommandParser_bases, swig_jvgs_sketch_LPathCommandParser_base_names };

static int _wrap_new_Group(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::sketch::Group *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::Group",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::Group",1,"jvgs::sketch::SketchElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("new_Group",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (jvgs::sketch::Group *)new jvgs::sketch::Group(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Group,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_getType(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) 0 ;
  SketchElementType result;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"jvgs::sketch::Group const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Group_getType",1,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  result = ((jvgs::sketch::Group const *)arg1)->getType();
  {
    SketchElementType * resultptr = new SketchElementType((const SketchElementType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SketchElementType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_addSketchElement(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) 0 ;
  jvgs::sketch::SketchElement *arg2 = (jvgs::sketch::SketchElement *) 0 ;
  
  SWIG_check_num_args("addSketchElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addSketchElement",1,"jvgs::sketch::Group *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addSketchElement",2,"jvgs::sketch::SketchElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Group_addSketchElement",1,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("Group_addSketchElement",2,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  (arg1)->addSketchElement(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_getNumberOfSketchElements(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) 0 ;
  int result;
  
  SWIG_check_num_args("getNumberOfSketchElements",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumberOfSketchElements",1,"jvgs::sketch::Group const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Group_getNumberOfSketchElements",1,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  result = (int)((jvgs::sketch::Group const *)arg1)->getNumberOfSketchElements();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_getSketchElement(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) 0 ;
  int arg2 ;
  jvgs::sketch::SketchElement *result = 0 ;
  
  SWIG_check_num_args("getSketchElement",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSketchElement",1,"jvgs::sketch::Group const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSketchElement",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Group_getSketchElement",1,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (jvgs::sketch::SketchElement *)((jvgs::sketch::Group const *)arg1)->getSketchElement(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) 0 ;
  jvgs::video::Renderer *arg2 = (jvgs::video::Renderer *) 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::Group const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("render",2,"jvgs::video::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Group_render",1,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Group_render",2,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  ((jvgs::sketch::Group const *)arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Group(void *obj) {
jvgs::sketch::Group *arg1 = (jvgs::sketch::Group *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_Group_methods[] = {
    {"getType", _wrap_Group_getType}, 
    {"addSketchElement", _wrap_Group_addSketchElement}, 
    {"getNumberOfSketchElements", _wrap_Group_getNumberOfSketchElements}, 
    {"getSketchElement", _wrap_Group_getSketchElement}, 
    {"render", _wrap_Group_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_Group_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_Group_bases[] = {0};
static const char *swig_jvgs_sketch_Group_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_Group = { "Group", &SWIGTYPE_p_jvgs__sketch__Group,_wrap_new_Group, swig_delete_Group, swig_jvgs_sketch_Group_methods, swig_jvgs_sketch_Group_attributes, swig_jvgs_sketch_Group_bases, swig_jvgs_sketch_Group_base_names };

static int _wrap_new_Path(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::sketch::Path *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::Path",1,"jvgs::sketch::SketchElement *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("new_Path",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (jvgs::sketch::Path *)new jvgs::sketch::Path(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Path,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getType(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  SketchElementType result;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"jvgs::sketch::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("Path_getType",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  result = ((jvgs::sketch::Path const *)arg1)->getType();
  {
    SketchElementType * resultptr = new SketchElementType((const SketchElementType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SketchElementType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getNumberOfComponents(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  int result;
  
  SWIG_check_num_args("getNumberOfComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNumberOfComponents",1,"jvgs::sketch::Path const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("Path_getNumberOfComponents",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  result = (int)((jvgs::sketch::Path const *)arg1)->getNumberOfComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_getComponent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  int arg2 ;
  jvgs::sketch::PathComponent *result = 0 ;
  
  SWIG_check_num_args("getComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponent",1,"jvgs::sketch::Path const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getComponent",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("Path_getComponent",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (jvgs::sketch::PathComponent *)((jvgs::sketch::Path const *)arg1)->getComponent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_addComponent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  jvgs::sketch::PathComponent *arg2 = (jvgs::sketch::PathComponent *) 0 ;
  
  SWIG_check_num_args("addComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addComponent",1,"jvgs::sketch::Path *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addComponent",2,"jvgs::sketch::PathComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("Path_addComponent",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("Path_addComponent",2,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  (arg1)->addComponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Path_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  jvgs::video::Renderer *arg2 = (jvgs::video::Renderer *) 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::Path const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("render",2,"jvgs::video::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("Path_render",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("Path_render",2,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  ((jvgs::sketch::Path const *)arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Path(void *obj) {
jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_Path_methods[] = {
    {"getType", _wrap_Path_getType}, 
    {"getNumberOfComponents", _wrap_Path_getNumberOfComponents}, 
    {"getComponent", _wrap_Path_getComponent}, 
    {"addComponent", _wrap_Path_addComponent}, 
    {"render", _wrap_Path_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_Path_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_Path_bases[] = {0};
static const char *swig_jvgs_sketch_Path_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_Path = { "Path", &SWIGTYPE_p_jvgs__sketch__Path,_wrap_new_Path, swig_delete_Path, swig_jvgs_sketch_Path_methods, swig_jvgs_sketch_Path_attributes, swig_jvgs_sketch_Path_bases, swig_jvgs_sketch_Path_base_names };

static int _wrap_new_Parser(lua_State* L) {
  int SWIG_arg = 0;
  std::string arg1 ;
  jvgs::sketch::Sketch *arg2 = (jvgs::sketch::Sketch *) 0 ;
  jvgs::sketch::Parser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::Parser",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("jvgs::sketch::Parser",1,"std::string");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("jvgs::sketch::Parser",2,"jvgs::sketch::Sketch *");
  (&arg1)->assign(lua_tostring(L,1),lua_strlen(L,1));
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("new_Parser",2,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  result = (jvgs::sketch::Parser *)new jvgs::sketch::Parser(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Parser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parser_getSketchElementParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Parser *arg1 = (jvgs::sketch::Parser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  jvgs::sketch::SketchElementParser *result = 0 ;
  
  SWIG_check_num_args("getSketchElementParser",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSketchElementParser",1,"jvgs::sketch::Parser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getSketchElementParser",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Parser,0))){
    SWIG_fail_ptr("Parser_getSketchElementParser",1,SWIGTYPE_p_jvgs__sketch__Parser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (jvgs::sketch::SketchElementParser *)(arg1)->getSketchElementParser((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SketchElementParser,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Parser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Parser *arg1 = (jvgs::sketch::Parser *) 0 ;
  
  SWIG_check_num_args("parse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::Parser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Parser,0))){
    SWIG_fail_ptr("Parser_parse",1,SWIGTYPE_p_jvgs__sketch__Parser);
  }
  
  (arg1)->parse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Parser(void *obj) {
jvgs::sketch::Parser *arg1 = (jvgs::sketch::Parser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_Parser_methods[] = {
    {"getSketchElementParser", _wrap_Parser_getSketchElementParser}, 
    {"parse", _wrap_Parser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_Parser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_Parser_bases[] = {0};
static const char *swig_jvgs_sketch_Parser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_Parser = { "Parser", &SWIGTYPE_p_jvgs__sketch__Parser,_wrap_new_Parser, swig_delete_Parser, swig_jvgs_sketch_Parser_methods, swig_jvgs_sketch_Parser_attributes, swig_jvgs_sketch_Parser_bases, swig_jvgs_sketch_Parser_base_names };

static int _wrap_new_Sketch(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  jvgs::sketch::Sketch *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::Sketch",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("jvgs::sketch::Sketch",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (jvgs::sketch::Sketch *)new jvgs::sketch::Sketch((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Sketch,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_getFileName(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getFileName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFileName",1,"jvgs::sketch::Sketch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_getFileName",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  result = (std::string *) &((jvgs::sketch::Sketch const *)arg1)->getFileName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_setSize(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setSize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSize",1,"jvgs::sketch::Sketch *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSize",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_setSize",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("Sketch_setSize",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->setSize((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_getSize(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"jvgs::sketch::Sketch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_getSize",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::sketch::Sketch const *)arg1)->getSize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_setRoot(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  jvgs::sketch::Group *arg2 = (jvgs::sketch::Group *) 0 ;
  
  SWIG_check_num_args("setRoot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRoot",1,"jvgs::sketch::Sketch *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setRoot",2,"jvgs::sketch::Group *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_setRoot",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Group,0))){
    SWIG_fail_ptr("Sketch_setRoot",2,SWIGTYPE_p_jvgs__sketch__Group);
  }
  
  (arg1)->setRoot(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_getRoot(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  jvgs::sketch::Group *result = 0 ;
  
  SWIG_check_num_args("getRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRoot",1,"jvgs::sketch::Sketch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_getRoot",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  result = (jvgs::sketch::Group *)((jvgs::sketch::Sketch const *)arg1)->getRoot();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__Group,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_getElementById(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  jvgs::sketch::SketchElement *result = 0 ;
  
  SWIG_check_num_args("getElementById",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getElementById",1,"jvgs::sketch::Sketch *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getElementById",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_getElementById",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (jvgs::sketch::SketchElement *)(arg1)->getElementById((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sketch_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) 0 ;
  
  SWIG_check_num_args("render",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::Sketch const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Sketch,0))){
    SWIG_fail_ptr("Sketch_render",1,SWIGTYPE_p_jvgs__sketch__Sketch);
  }
  
  ((jvgs::sketch::Sketch const *)arg1)->render();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sketch(void *obj) {
jvgs::sketch::Sketch *arg1 = (jvgs::sketch::Sketch *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_Sketch_methods[] = {
    {"getFileName", _wrap_Sketch_getFileName}, 
    {"setSize", _wrap_Sketch_setSize}, 
    {"getSize", _wrap_Sketch_getSize}, 
    {"setRoot", _wrap_Sketch_setRoot}, 
    {"getRoot", _wrap_Sketch_getRoot}, 
    {"getElementById", _wrap_Sketch_getElementById}, 
    {"render", _wrap_Sketch_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_Sketch_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_Sketch_bases[] = {0};
static const char *swig_jvgs_sketch_Sketch_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_Sketch = { "Sketch", &SWIGTYPE_p_jvgs__sketch__Sketch,_wrap_new_Sketch, swig_delete_Sketch, swig_jvgs_sketch_Sketch_methods, swig_jvgs_sketch_Sketch_attributes, swig_jvgs_sketch_Sketch_bases, swig_jvgs_sketch_Sketch_base_names };

static int _wrap_new_PathDataParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::Path *arg1 = (jvgs::sketch::Path *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  jvgs::sketch::PathDataParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::PathDataParser",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::PathDataParser",1,"jvgs::sketch::Path *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("jvgs::sketch::PathDataParser",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("new_PathDataParser",1,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (jvgs::sketch::PathDataParser *)new jvgs::sketch::PathDataParser(arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathDataParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_getCurrentComponent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::PathComponent *result = 0 ;
  
  SWIG_check_num_args("getCurrentComponent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCurrentComponent",1,"jvgs::sketch::PathDataParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_getCurrentComponent",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::sketch::PathComponent *)((jvgs::sketch::PathDataParser const *)arg1)->getCurrentComponent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__PathComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_setCurrentComponent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::PathComponent *arg2 = (jvgs::sketch::PathComponent *) 0 ;
  
  SWIG_check_num_args("setCurrentComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCurrentComponent",1,"jvgs::sketch::PathDataParser *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setCurrentComponent",2,"jvgs::sketch::PathComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_setCurrentComponent",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__PathComponent,0))){
    SWIG_fail_ptr("PathDataParser_setCurrentComponent",2,SWIGTYPE_p_jvgs__sketch__PathComponent);
  }
  
  (arg1)->setCurrentComponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_getLastSegment(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::PathSegment *result = 0 ;
  
  SWIG_check_num_args("getLastSegment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLastSegment",1,"jvgs::sketch::PathDataParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_getLastSegment",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::math::PathSegment *)((jvgs::sketch::PathDataParser const *)arg1)->getLastSegment();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__PathSegment,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_getStartingPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getStartingPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getStartingPoint",1,"jvgs::sketch::PathDataParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_getStartingPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::sketch::PathDataParser const *)arg1)->getStartingPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_setStartingPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setStartingPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setStartingPoint",1,"jvgs::sketch::PathDataParser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setStartingPoint",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_setStartingPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("PathDataParser_setStartingPoint",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->setStartingPoint((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_getCurrentPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getCurrentPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCurrentPoint",1,"jvgs::sketch::PathDataParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_getCurrentPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::sketch::PathDataParser const *)arg1)->getCurrentPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_setCurrentPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setCurrentPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCurrentPoint",1,"jvgs::sketch::PathDataParser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setCurrentPoint",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_setCurrentPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("PathDataParser_setCurrentPoint",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->setCurrentPoint((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_getLastControlPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *result = 0 ;
  
  SWIG_check_num_args("getLastControlPoint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLastControlPoint",1,"jvgs::sketch::PathDataParser const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_getLastControlPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::math::Vector2D *) &((jvgs::sketch::PathDataParser const *)arg1)->getLastControlPoint();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__Vector2D,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_setLastControlPoint(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  
  SWIG_check_num_args("setLastControlPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLastControlPoint",1,"jvgs::sketch::PathDataParser *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setLastControlPoint",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_setLastControlPoint",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("PathDataParser_setLastControlPoint",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  (arg1)->setLastControlPoint((jvgs::math::Vector2D const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  
  SWIG_check_num_args("parse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_parse",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  (arg1)->parse();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_command(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("command",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("command",1,"jvgs::sketch::PathDataParser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("command",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_command",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->command((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_isRelativeCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  char arg2 ;
  bool result;
  
  SWIG_check_num_args("isRelativeCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isRelativeCommand",1,"jvgs::sketch::PathDataParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("isRelativeCommand",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_isRelativeCommand",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (bool)((jvgs::sketch::PathDataParser const *)arg1)->isRelativeCommand(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_lowerCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  char arg2 ;
  char result;
  
  SWIG_check_num_args("lowerCommand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lowerCommand",1,"jvgs::sketch::PathDataParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("lowerCommand",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_lowerCommand",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (char)((jvgs::sketch::PathDataParser const *)arg1)->lowerCommand(arg2);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_toAbsoluteSpace(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  char arg2 ;
  jvgs::math::Vector2D *arg3 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("toAbsoluteSpace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("toAbsoluteSpace",1,"jvgs::sketch::PathDataParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("toAbsoluteSpace",2,"char");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("toAbsoluteSpace",3,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_toAbsoluteSpace",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("PathDataParser_toAbsoluteSpace",3,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::sketch::PathDataParser const *)arg1)->toAbsoluteSpace(arg2,(jvgs::math::Vector2D const &)*arg3);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PathDataParser_toWorldSpace(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::math::Vector2D *arg2 = 0 ;
  jvgs::math::Vector2D result;
  
  SWIG_check_num_args("toWorldSpace",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("toWorldSpace",1,"jvgs::sketch::PathDataParser const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("toWorldSpace",2,"jvgs::math::Vector2D const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("PathDataParser_toWorldSpace",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__Vector2D,0))){
    SWIG_fail_ptr("PathDataParser_toWorldSpace",2,SWIGTYPE_p_jvgs__math__Vector2D);
  }
  
  result = ((jvgs::sketch::PathDataParser const *)arg1)->toWorldSpace((jvgs::math::Vector2D const &)*arg2);
  {
    jvgs::math::Vector2D * resultptr = new jvgs::math::Vector2D((const jvgs::math::Vector2D &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__Vector2D,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_PathDataParser(void *obj) {
jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_PathDataParser_methods[] = {
    {"getCurrentComponent", _wrap_PathDataParser_getCurrentComponent}, 
    {"setCurrentComponent", _wrap_PathDataParser_setCurrentComponent}, 
    {"getLastSegment", _wrap_PathDataParser_getLastSegment}, 
    {"getStartingPoint", _wrap_PathDataParser_getStartingPoint}, 
    {"setStartingPoint", _wrap_PathDataParser_setStartingPoint}, 
    {"getCurrentPoint", _wrap_PathDataParser_getCurrentPoint}, 
    {"setCurrentPoint", _wrap_PathDataParser_setCurrentPoint}, 
    {"getLastControlPoint", _wrap_PathDataParser_getLastControlPoint}, 
    {"setLastControlPoint", _wrap_PathDataParser_setLastControlPoint}, 
    {"parse", _wrap_PathDataParser_parse}, 
    {"command", _wrap_PathDataParser_command}, 
    {"isRelativeCommand", _wrap_PathDataParser_isRelativeCommand}, 
    {"lowerCommand", _wrap_PathDataParser_lowerCommand}, 
    {"toAbsoluteSpace", _wrap_PathDataParser_toAbsoluteSpace}, 
    {"toWorldSpace", _wrap_PathDataParser_toWorldSpace}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_PathDataParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_PathDataParser_bases[] = {0};
static const char *swig_jvgs_sketch_PathDataParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_PathDataParser = { "PathDataParser", &SWIGTYPE_p_jvgs__sketch__PathDataParser,_wrap_new_PathDataParser, swig_delete_PathDataParser, swig_jvgs_sketch_PathDataParser_methods, swig_jvgs_sketch_PathDataParser_attributes, swig_jvgs_sketch_PathDataParser_bases, swig_jvgs_sketch_PathDataParser_base_names };

static int _wrap_SketchElement_getType(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::sketch::SketchElementType result;
  
  SWIG_check_num_args("getType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getType",1,"jvgs::sketch::SketchElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_getType",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (jvgs::sketch::SketchElementType)((jvgs::sketch::SketchElement const *)arg1)->getType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_getParent(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::sketch::SketchElement *result = 0 ;
  
  SWIG_check_num_args("getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParent",1,"jvgs::sketch::SketchElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_getParent",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (jvgs::sketch::SketchElement *)((jvgs::sketch::SketchElement const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SketchElement,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_setMatrix(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  
  SWIG_check_num_args("setMatrix",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMatrix",1,"jvgs::sketch::SketchElement *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMatrix",2,"jvgs::math::AffineTransformationMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_setMatrix",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("SketchElement_setMatrix",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  (arg1)->setMatrix((jvgs::math::AffineTransformationMatrix const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_getMatrix(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::math::AffineTransformationMatrix *result = 0 ;
  
  SWIG_check_num_args("getMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMatrix",1,"jvgs::sketch::SketchElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_getMatrix",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (jvgs::math::AffineTransformationMatrix *) &((jvgs::sketch::SketchElement const *)arg1)->getMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_getCompleteMatrix(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::math::AffineTransformationMatrix result;
  
  SWIG_check_num_args("getCompleteMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCompleteMatrix",1,"jvgs::sketch::SketchElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_getCompleteMatrix",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = ((jvgs::sketch::SketchElement const *)arg1)->getCompleteMatrix();
  {
    jvgs::math::AffineTransformationMatrix * resultptr = new jvgs::math::AffineTransformationMatrix((const jvgs::math::AffineTransformationMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_getId(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getId",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getId",1,"jvgs::sketch::SketchElement const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_getId",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  result = (std::string *) &((jvgs::sketch::SketchElement const *)arg1)->getId();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_setId(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setId",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setId",1,"jvgs::sketch::SketchElement *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setId",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_setId",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setId((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SketchElement_render(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) 0 ;
  jvgs::video::Renderer *arg2 = (jvgs::video::Renderer *) 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"jvgs::sketch::SketchElement const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("render",2,"jvgs::video::Renderer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SketchElement,0))){
    SWIG_fail_ptr("SketchElement_render",1,SWIGTYPE_p_jvgs__sketch__SketchElement);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__video__Renderer,0))){
    SWIG_fail_ptr("SketchElement_render",2,SWIGTYPE_p_jvgs__video__Renderer);
  }
  
  ((jvgs::sketch::SketchElement const *)arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SketchElement(void *obj) {
jvgs::sketch::SketchElement *arg1 = (jvgs::sketch::SketchElement *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SketchElement_methods[] = {
    {"getType", _wrap_SketchElement_getType}, 
    {"getParent", _wrap_SketchElement_getParent}, 
    {"setMatrix", _wrap_SketchElement_setMatrix}, 
    {"getMatrix", _wrap_SketchElement_getMatrix}, 
    {"getCompleteMatrix", _wrap_SketchElement_getCompleteMatrix}, 
    {"getId", _wrap_SketchElement_getId}, 
    {"setId", _wrap_SketchElement_setId}, 
    {"render", _wrap_SketchElement_render}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SketchElement_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SketchElement_bases[] = {0};
static const char *swig_jvgs_sketch_SketchElement_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_SketchElement = { "SketchElement", &SWIGTYPE_p_jvgs__sketch__SketchElement,0, swig_delete_SketchElement, swig_jvgs_sketch_SketchElement_methods, swig_jvgs_sketch_SketchElement_attributes, swig_jvgs_sketch_SketchElement_bases, swig_jvgs_sketch_SketchElement_base_names };

static int _wrap_new_TextParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TextParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::TextParser",0,0)
  result = (jvgs::sketch::TextParser *)new jvgs::sketch::TextParser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__TextParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextParser_trim(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TextParser *arg1 = (jvgs::sketch::TextParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("trim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("trim",1,"jvgs::sketch::TextParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("trim",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TextParser,0))){
    SWIG_fail_ptr("TextParser_trim",1,SWIGTYPE_p_jvgs__sketch__TextParser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((jvgs::sketch::TextParser const *)arg1)->trim((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextParser_split(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TextParser *arg1 = (jvgs::sketch::TextParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("split",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("split",1,"jvgs::sketch::TextParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("split",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("split",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("split",4,"std::vector< std::string > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TextParser,0))){
    SWIG_fail_ptr("TextParser_split",1,SWIGTYPE_p_jvgs__sketch__TextParser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_std__string_t,0))){
    SWIG_fail_ptr("TextParser_split",4,SWIGTYPE_p_std__vectorT_std__string_t);
  }
  
  ((jvgs::sketch::TextParser const *)arg1)->split((std::string const &)*arg2,(std::string const &)*arg3,*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextParser_replaceAll(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TextParser *arg1 = (jvgs::sketch::TextParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp3 ;
  std::string temp4 ;
  
  SWIG_check_num_args("replaceAll",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("replaceAll",1,"jvgs::sketch::TextParser const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("replaceAll",2,"std::string &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("replaceAll",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("replaceAll",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TextParser,0))){
    SWIG_fail_ptr("TextParser_replaceAll",1,SWIGTYPE_p_jvgs__sketch__TextParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("TextParser_replaceAll",2,SWIGTYPE_p_std__string);
  }
  
  temp3.assign(lua_tostring(L,3),lua_strlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_strlen(L,4)); arg4=&temp4;
  ((jvgs::sketch::TextParser const *)arg1)->replaceAll(*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TextParser_parseColor(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TextParser *arg1 = (jvgs::sketch::TextParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  jvgs::video::Color result;
  
  SWIG_check_num_args("parseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parseColor",1,"jvgs::sketch::TextParser const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("parseColor",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TextParser,0))){
    SWIG_fail_ptr("TextParser_parseColor",1,SWIGTYPE_p_jvgs__sketch__TextParser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((jvgs::sketch::TextParser const *)arg1)->parseColor((std::string const &)*arg2);
  {
    jvgs::video::Color * resultptr = new jvgs::video::Color((const jvgs::video::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__video__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TextParser(void *obj) {
jvgs::sketch::TextParser *arg1 = (jvgs::sketch::TextParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_TextParser_methods[] = {
    {"trim", _wrap_TextParser_trim}, 
    {"split", _wrap_TextParser_split}, 
    {"replaceAll", _wrap_TextParser_replaceAll}, 
    {"parseColor", _wrap_TextParser_parseColor}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_TextParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_TextParser_bases[] = {0};
static const char *swig_jvgs_sketch_TextParser_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_TextParser = { "TextParser", &SWIGTYPE_p_jvgs__sketch__TextParser,_wrap_new_TextParser, swig_delete_TextParser, swig_jvgs_sketch_TextParser_methods, swig_jvgs_sketch_TextParser_attributes, swig_jvgs_sketch_TextParser_bases, swig_jvgs_sketch_TextParser_base_names };

static int _wrap_new_SkewYTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SkewYTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::SkewYTransformCommand",0,0)
  result = (jvgs::sketch::SkewYTransformCommand *)new jvgs::sketch::SkewYTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SkewYTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SkewYTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SkewYTransformCommand *arg1 = (jvgs::sketch::SkewYTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::SkewYTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SkewYTransformCommand,0))){
    SWIG_fail_ptr("SkewYTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__SkewYTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("SkewYTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SkewYTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::SkewYTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SkewYTransformCommand(void *obj) {
jvgs::sketch::SkewYTransformCommand *arg1 = (jvgs::sketch::SkewYTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SkewYTransformCommand_methods[] = {
    {"apply", _wrap_SkewYTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SkewYTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SkewYTransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_SkewYTransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_SkewYTransformCommand = { "SkewYTransformCommand", &SWIGTYPE_p_jvgs__sketch__SkewYTransformCommand,_wrap_new_SkewYTransformCommand, swig_delete_SkewYTransformCommand, swig_jvgs_sketch_SkewYTransformCommand_methods, swig_jvgs_sketch_SkewYTransformCommand_attributes, swig_jvgs_sketch_SkewYTransformCommand_bases, swig_jvgs_sketch_SkewYTransformCommand_base_names };

static int _wrap_new_TranslateTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TranslateTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::TranslateTransformCommand",0,0)
  result = (jvgs::sketch::TranslateTransformCommand *)new jvgs::sketch::TranslateTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__TranslateTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TranslateTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TranslateTransformCommand *arg1 = (jvgs::sketch::TranslateTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::TranslateTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TranslateTransformCommand,0))){
    SWIG_fail_ptr("TranslateTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__TranslateTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("TranslateTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("TranslateTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::TranslateTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TranslateTransformCommand(void *obj) {
jvgs::sketch::TranslateTransformCommand *arg1 = (jvgs::sketch::TranslateTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_TranslateTransformCommand_methods[] = {
    {"apply", _wrap_TranslateTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_TranslateTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_TranslateTransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_TranslateTransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_TranslateTransformCommand = { "TranslateTransformCommand", &SWIGTYPE_p_jvgs__sketch__TranslateTransformCommand,_wrap_new_TranslateTransformCommand, swig_delete_TranslateTransformCommand, swig_jvgs_sketch_TranslateTransformCommand_methods, swig_jvgs_sketch_TranslateTransformCommand_attributes, swig_jvgs_sketch_TranslateTransformCommand_bases, swig_jvgs_sketch_TranslateTransformCommand_base_names };

static int _wrap_new_SPathCommandParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::SPathCommandParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::SPathCommandParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::SPathCommandParser",1,"jvgs::sketch::PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("new_SPathCommandParser",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::sketch::SPathCommandParser *)new jvgs::sketch::SPathCommandParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__SPathCommandParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SPathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::SPathCommandParser *arg1 = (jvgs::sketch::SPathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::SPathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__SPathCommandParser,0))){
    SWIG_fail_ptr("SPathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__SPathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("SPathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("SPathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::SPathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SPathCommandParser(void *obj) {
jvgs::sketch::SPathCommandParser *arg1 = (jvgs::sketch::SPathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_SPathCommandParser_methods[] = {
    {"parse", _wrap_SPathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_SPathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_SPathCommandParser_bases[] = {0,0};
static const char *swig_jvgs_sketch_SPathCommandParser_base_names[] = {"jvgs::sketch::PathCommandParser *",0};
static swig_lua_class _wrap_class_jvgs_sketch_SPathCommandParser = { "SPathCommandParser", &SWIGTYPE_p_jvgs__sketch__SPathCommandParser,_wrap_new_SPathCommandParser, swig_delete_SPathCommandParser, swig_jvgs_sketch_SPathCommandParser_methods, swig_jvgs_sketch_SPathCommandParser_attributes, swig_jvgs_sketch_SPathCommandParser_bases, swig_jvgs_sketch_SPathCommandParser_base_names };

static int _wrap_new_MatrixTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::MatrixTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::MatrixTransformCommand",0,0)
  result = (jvgs::sketch::MatrixTransformCommand *)new jvgs::sketch::MatrixTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__MatrixTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MatrixTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::MatrixTransformCommand *arg1 = (jvgs::sketch::MatrixTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::MatrixTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__MatrixTransformCommand,0))){
    SWIG_fail_ptr("MatrixTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__MatrixTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("MatrixTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("MatrixTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::MatrixTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MatrixTransformCommand(void *obj) {
jvgs::sketch::MatrixTransformCommand *arg1 = (jvgs::sketch::MatrixTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_MatrixTransformCommand_methods[] = {
    {"apply", _wrap_MatrixTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_MatrixTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_MatrixTransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_MatrixTransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_MatrixTransformCommand = { "MatrixTransformCommand", &SWIGTYPE_p_jvgs__sketch__MatrixTransformCommand,_wrap_new_MatrixTransformCommand, swig_delete_MatrixTransformCommand, swig_jvgs_sketch_MatrixTransformCommand_methods, swig_jvgs_sketch_MatrixTransformCommand_attributes, swig_jvgs_sketch_MatrixTransformCommand_bases, swig_jvgs_sketch_MatrixTransformCommand_base_names };

static int _wrap_new_ZPathCommandParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::PathDataParser *arg1 = (jvgs::sketch::PathDataParser *) 0 ;
  jvgs::sketch::ZPathCommandParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::ZPathCommandParser",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("jvgs::sketch::ZPathCommandParser",1,"jvgs::sketch::PathDataParser *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__PathDataParser,0))){
    SWIG_fail_ptr("new_ZPathCommandParser",1,SWIGTYPE_p_jvgs__sketch__PathDataParser);
  }
  
  result = (jvgs::sketch::ZPathCommandParser *)new jvgs::sketch::ZPathCommandParser(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__ZPathCommandParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ZPathCommandParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::ZPathCommandParser *arg1 = (jvgs::sketch::ZPathCommandParser *) 0 ;
  jvgs::sketch::Path *arg2 = (jvgs::sketch::Path *) 0 ;
  char arg3 ;
  std::vector< float > *arg4 = 0 ;
  
  SWIG_check_num_args("parse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::ZPathCommandParser const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("parse",2,"jvgs::sketch::Path *");
  if(!lua_isstring(L,3)) SWIG_fail_arg("parse",3,"char");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("parse",4,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__ZPathCommandParser,0))){
    SWIG_fail_ptr("ZPathCommandParser_parse",1,SWIGTYPE_p_jvgs__sketch__ZPathCommandParser);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__sketch__Path,0))){
    SWIG_fail_ptr("ZPathCommandParser_parse",2,SWIGTYPE_p_jvgs__sketch__Path);
  }
  
  arg3 = (lua_tostring(L, 3))[0];
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("ZPathCommandParser_parse",4,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::ZPathCommandParser const *)arg1)->parse(arg2,arg3,(std::vector< float > const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ZPathCommandParser(void *obj) {
jvgs::sketch::ZPathCommandParser *arg1 = (jvgs::sketch::ZPathCommandParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_ZPathCommandParser_methods[] = {
    {"parse", _wrap_ZPathCommandParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_ZPathCommandParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_ZPathCommandParser_bases[] = {0,0};
static const char *swig_jvgs_sketch_ZPathCommandParser_base_names[] = {"jvgs::sketch::PathCommandParser *",0};
static swig_lua_class _wrap_class_jvgs_sketch_ZPathCommandParser = { "ZPathCommandParser", &SWIGTYPE_p_jvgs__sketch__ZPathCommandParser,_wrap_new_ZPathCommandParser, swig_delete_ZPathCommandParser, swig_jvgs_sketch_ZPathCommandParser_methods, swig_jvgs_sketch_ZPathCommandParser_attributes, swig_jvgs_sketch_ZPathCommandParser_bases, swig_jvgs_sketch_ZPathCommandParser_base_names };

static int _wrap_new_TransformParser(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TransformParser *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::TransformParser",0,0)
  result = (jvgs::sketch::TransformParser *)new jvgs::sketch::TransformParser();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__TransformParser,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformParser_parse(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TransformParser *arg1 = (jvgs::sketch::TransformParser *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  jvgs::math::AffineTransformationMatrix result;
  
  SWIG_check_num_args("parse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("parse",1,"jvgs::sketch::TransformParser *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("parse",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TransformParser,0))){
    SWIG_fail_ptr("TransformParser_parse",1,SWIGTYPE_p_jvgs__sketch__TransformParser);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (arg1)->parse((std::string const &)*arg2);
  {
    jvgs::math::AffineTransformationMatrix * resultptr = new jvgs::math::AffineTransformationMatrix((const jvgs::math::AffineTransformationMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransformParser(void *obj) {
jvgs::sketch::TransformParser *arg1 = (jvgs::sketch::TransformParser *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_TransformParser_methods[] = {
    {"parse", _wrap_TransformParser_parse}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_TransformParser_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_TransformParser_bases[] = {0,0};
static const char *swig_jvgs_sketch_TransformParser_base_names[] = {"jvgs::sketch::TextParser *",0};
static swig_lua_class _wrap_class_jvgs_sketch_TransformParser = { "TransformParser", &SWIGTYPE_p_jvgs__sketch__TransformParser,_wrap_new_TransformParser, swig_delete_TransformParser, swig_jvgs_sketch_TransformParser_methods, swig_jvgs_sketch_TransformParser_attributes, swig_jvgs_sketch_TransformParser_bases, swig_jvgs_sketch_TransformParser_base_names };

static int _wrap_TransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::TransformCommand *arg1 = (jvgs::sketch::TransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::TransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__TransformCommand,0))){
    SWIG_fail_ptr("TransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__TransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("TransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("TransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::TransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TransformCommand(void *obj) {
jvgs::sketch::TransformCommand *arg1 = (jvgs::sketch::TransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_TransformCommand_methods[] = {
    {"apply", _wrap_TransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_TransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_TransformCommand_bases[] = {0};
static const char *swig_jvgs_sketch_TransformCommand_base_names[] = {0};
static swig_lua_class _wrap_class_jvgs_sketch_TransformCommand = { "TransformCommand", &SWIGTYPE_p_jvgs__sketch__TransformCommand,0, swig_delete_TransformCommand, swig_jvgs_sketch_TransformCommand_methods, swig_jvgs_sketch_TransformCommand_attributes, swig_jvgs_sketch_TransformCommand_bases, swig_jvgs_sketch_TransformCommand_base_names };

static int _wrap_new_RotateTransformCommand(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::RotateTransformCommand *result = 0 ;
  
  SWIG_check_num_args("jvgs::sketch::RotateTransformCommand",0,0)
  result = (jvgs::sketch::RotateTransformCommand *)new jvgs::sketch::RotateTransformCommand();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_jvgs__sketch__RotateTransformCommand,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RotateTransformCommand_apply(lua_State* L) {
  int SWIG_arg = 0;
  jvgs::sketch::RotateTransformCommand *arg1 = (jvgs::sketch::RotateTransformCommand *) 0 ;
  jvgs::math::AffineTransformationMatrix *arg2 = 0 ;
  std::vector< float > *arg3 = 0 ;
  
  SWIG_check_num_args("apply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("apply",1,"jvgs::sketch::RotateTransformCommand const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("apply",2,"jvgs::math::AffineTransformationMatrix &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("apply",3,"std::vector< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_jvgs__sketch__RotateTransformCommand,0))){
    SWIG_fail_ptr("RotateTransformCommand_apply",1,SWIGTYPE_p_jvgs__sketch__RotateTransformCommand);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix,0))){
    SWIG_fail_ptr("RotateTransformCommand_apply",2,SWIGTYPE_p_jvgs__math__AffineTransformationMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("RotateTransformCommand_apply",3,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  ((jvgs::sketch::RotateTransformCommand const *)arg1)->apply(*arg2,(std::vector< float > const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RotateTransformCommand(void *obj) {
jvgs::sketch::RotateTransformCommand *arg1 = (jvgs::sketch::RotateTransformCommand *) obj;
delete arg1;
}
static swig_lua_method swig_jvgs_sketch_RotateTransformCommand_methods[] = {
    {"apply", _wrap_RotateTransformCommand_apply}, 
    {0,0}
};
static swig_lua_attribute swig_jvgs_sketch_RotateTransformCommand_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_jvgs_sketch_RotateTransformCommand_bases[] = {0,0};
static const char *swig_jvgs_sketch_RotateTransformCommand_base_names[] = {"jvgs::sketch::TransformCommand *",0};
static swig_lua_class _wrap_class_jvgs_sketch_RotateTransformCommand = { "RotateTransformCommand", &SWIGTYPE_p_jvgs__sketch__RotateTransformCommand,_wrap_new_RotateTransformCommand, swig_delete_RotateTransformCommand, swig_jvgs_sketch_RotateTransformCommand_methods, swig_jvgs_sketch_RotateTransformCommand_attributes, swig_jvgs_sketch_RotateTransformCommand_bases, swig_jvgs_sketch_RotateTransformCommand_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "LogManager_getInstance", _wrap_LogManager_getInstance},
    { "InputManager_getInstance", _wrap_InputManager_getInstance},
    { "VideoManager_getInstance", _wrap_VideoManager_getInstance},
    { "ListManager_getInstance", _wrap_ListManager_getInstance},
    { "MathManager_getInstance", _wrap_MathManager_getInstance},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"KEY_UNKNOWN", (long) jvgs::input::KEY_UNKNOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_FIRST", (long) jvgs::input::KEY_FIRST, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_BACKSPACE", (long) jvgs::input::KEY_BACKSPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_TAB", (long) jvgs::input::KEY_TAB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_CLEAR", (long) jvgs::input::KEY_CLEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RETURN", (long) jvgs::input::KEY_RETURN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PAUSE", (long) jvgs::input::KEY_PAUSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_ESCAPE", (long) jvgs::input::KEY_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SPACE", (long) jvgs::input::KEY_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_EXCLAIM", (long) jvgs::input::KEY_EXCLAIM, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_QUOTEDBL", (long) jvgs::input::KEY_QUOTEDBL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_HASH", (long) jvgs::input::KEY_HASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_DOLLAR", (long) jvgs::input::KEY_DOLLAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_AMPERSAND", (long) jvgs::input::KEY_AMPERSAND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_QUOTE", (long) jvgs::input::KEY_QUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LEFTPAREN", (long) jvgs::input::KEY_LEFTPAREN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RIGHTPAREN", (long) jvgs::input::KEY_RIGHTPAREN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_ASTERISK", (long) jvgs::input::KEY_ASTERISK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PLUS", (long) jvgs::input::KEY_PLUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_COMMA", (long) jvgs::input::KEY_COMMA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_MINUS", (long) jvgs::input::KEY_MINUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PERIOD", (long) jvgs::input::KEY_PERIOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SLASH", (long) jvgs::input::KEY_SLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_0", (long) jvgs::input::KEY_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_1", (long) jvgs::input::KEY_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_2", (long) jvgs::input::KEY_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_3", (long) jvgs::input::KEY_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_4", (long) jvgs::input::KEY_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_5", (long) jvgs::input::KEY_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_6", (long) jvgs::input::KEY_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_7", (long) jvgs::input::KEY_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_8", (long) jvgs::input::KEY_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_9", (long) jvgs::input::KEY_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_COLON", (long) jvgs::input::KEY_COLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SEMICOLON", (long) jvgs::input::KEY_SEMICOLON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LESS", (long) jvgs::input::KEY_LESS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_EQUALS", (long) jvgs::input::KEY_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_GREATER", (long) jvgs::input::KEY_GREATER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_QUESTION", (long) jvgs::input::KEY_QUESTION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_AT", (long) jvgs::input::KEY_AT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LEFTBRACKET", (long) jvgs::input::KEY_LEFTBRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_BACKSLASH", (long) jvgs::input::KEY_BACKSLASH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RIGHTBRACKET", (long) jvgs::input::KEY_RIGHTBRACKET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_CARET", (long) jvgs::input::KEY_CARET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_UNDERSCORE", (long) jvgs::input::KEY_UNDERSCORE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_BACKQUOTE", (long) jvgs::input::KEY_BACKQUOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_a", (long) jvgs::input::KEY_a, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_b", (long) jvgs::input::KEY_b, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_c", (long) jvgs::input::KEY_c, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_d", (long) jvgs::input::KEY_d, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_e", (long) jvgs::input::KEY_e, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_f", (long) jvgs::input::KEY_f, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_g", (long) jvgs::input::KEY_g, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_h", (long) jvgs::input::KEY_h, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_i", (long) jvgs::input::KEY_i, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_j", (long) jvgs::input::KEY_j, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_k", (long) jvgs::input::KEY_k, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_l", (long) jvgs::input::KEY_l, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_m", (long) jvgs::input::KEY_m, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_n", (long) jvgs::input::KEY_n, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_o", (long) jvgs::input::KEY_o, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_p", (long) jvgs::input::KEY_p, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_q", (long) jvgs::input::KEY_q, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_r", (long) jvgs::input::KEY_r, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_s", (long) jvgs::input::KEY_s, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_t", (long) jvgs::input::KEY_t, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_u", (long) jvgs::input::KEY_u, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_v", (long) jvgs::input::KEY_v, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_w", (long) jvgs::input::KEY_w, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_x", (long) jvgs::input::KEY_x, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_y", (long) jvgs::input::KEY_y, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_z", (long) jvgs::input::KEY_z, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_DELETE", (long) jvgs::input::KEY_DELETE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_0", (long) jvgs::input::KEY_WORLD_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_1", (long) jvgs::input::KEY_WORLD_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_2", (long) jvgs::input::KEY_WORLD_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_3", (long) jvgs::input::KEY_WORLD_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_4", (long) jvgs::input::KEY_WORLD_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_5", (long) jvgs::input::KEY_WORLD_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_6", (long) jvgs::input::KEY_WORLD_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_7", (long) jvgs::input::KEY_WORLD_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_8", (long) jvgs::input::KEY_WORLD_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_9", (long) jvgs::input::KEY_WORLD_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_10", (long) jvgs::input::KEY_WORLD_10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_11", (long) jvgs::input::KEY_WORLD_11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_12", (long) jvgs::input::KEY_WORLD_12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_13", (long) jvgs::input::KEY_WORLD_13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_14", (long) jvgs::input::KEY_WORLD_14, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_15", (long) jvgs::input::KEY_WORLD_15, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_16", (long) jvgs::input::KEY_WORLD_16, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_17", (long) jvgs::input::KEY_WORLD_17, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_18", (long) jvgs::input::KEY_WORLD_18, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_19", (long) jvgs::input::KEY_WORLD_19, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_20", (long) jvgs::input::KEY_WORLD_20, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_21", (long) jvgs::input::KEY_WORLD_21, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_22", (long) jvgs::input::KEY_WORLD_22, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_23", (long) jvgs::input::KEY_WORLD_23, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_24", (long) jvgs::input::KEY_WORLD_24, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_25", (long) jvgs::input::KEY_WORLD_25, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_26", (long) jvgs::input::KEY_WORLD_26, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_27", (long) jvgs::input::KEY_WORLD_27, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_28", (long) jvgs::input::KEY_WORLD_28, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_29", (long) jvgs::input::KEY_WORLD_29, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_30", (long) jvgs::input::KEY_WORLD_30, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_31", (long) jvgs::input::KEY_WORLD_31, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_32", (long) jvgs::input::KEY_WORLD_32, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_33", (long) jvgs::input::KEY_WORLD_33, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_34", (long) jvgs::input::KEY_WORLD_34, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_35", (long) jvgs::input::KEY_WORLD_35, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_36", (long) jvgs::input::KEY_WORLD_36, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_37", (long) jvgs::input::KEY_WORLD_37, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_38", (long) jvgs::input::KEY_WORLD_38, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_39", (long) jvgs::input::KEY_WORLD_39, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_40", (long) jvgs::input::KEY_WORLD_40, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_41", (long) jvgs::input::KEY_WORLD_41, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_42", (long) jvgs::input::KEY_WORLD_42, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_43", (long) jvgs::input::KEY_WORLD_43, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_44", (long) jvgs::input::KEY_WORLD_44, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_45", (long) jvgs::input::KEY_WORLD_45, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_46", (long) jvgs::input::KEY_WORLD_46, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_47", (long) jvgs::input::KEY_WORLD_47, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_48", (long) jvgs::input::KEY_WORLD_48, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_49", (long) jvgs::input::KEY_WORLD_49, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_50", (long) jvgs::input::KEY_WORLD_50, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_51", (long) jvgs::input::KEY_WORLD_51, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_52", (long) jvgs::input::KEY_WORLD_52, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_53", (long) jvgs::input::KEY_WORLD_53, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_54", (long) jvgs::input::KEY_WORLD_54, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_55", (long) jvgs::input::KEY_WORLD_55, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_56", (long) jvgs::input::KEY_WORLD_56, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_57", (long) jvgs::input::KEY_WORLD_57, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_58", (long) jvgs::input::KEY_WORLD_58, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_59", (long) jvgs::input::KEY_WORLD_59, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_60", (long) jvgs::input::KEY_WORLD_60, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_61", (long) jvgs::input::KEY_WORLD_61, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_62", (long) jvgs::input::KEY_WORLD_62, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_63", (long) jvgs::input::KEY_WORLD_63, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_64", (long) jvgs::input::KEY_WORLD_64, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_65", (long) jvgs::input::KEY_WORLD_65, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_66", (long) jvgs::input::KEY_WORLD_66, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_67", (long) jvgs::input::KEY_WORLD_67, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_68", (long) jvgs::input::KEY_WORLD_68, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_69", (long) jvgs::input::KEY_WORLD_69, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_70", (long) jvgs::input::KEY_WORLD_70, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_71", (long) jvgs::input::KEY_WORLD_71, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_72", (long) jvgs::input::KEY_WORLD_72, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_73", (long) jvgs::input::KEY_WORLD_73, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_74", (long) jvgs::input::KEY_WORLD_74, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_75", (long) jvgs::input::KEY_WORLD_75, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_76", (long) jvgs::input::KEY_WORLD_76, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_77", (long) jvgs::input::KEY_WORLD_77, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_78", (long) jvgs::input::KEY_WORLD_78, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_79", (long) jvgs::input::KEY_WORLD_79, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_80", (long) jvgs::input::KEY_WORLD_80, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_81", (long) jvgs::input::KEY_WORLD_81, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_82", (long) jvgs::input::KEY_WORLD_82, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_83", (long) jvgs::input::KEY_WORLD_83, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_84", (long) jvgs::input::KEY_WORLD_84, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_85", (long) jvgs::input::KEY_WORLD_85, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_86", (long) jvgs::input::KEY_WORLD_86, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_87", (long) jvgs::input::KEY_WORLD_87, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_88", (long) jvgs::input::KEY_WORLD_88, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_89", (long) jvgs::input::KEY_WORLD_89, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_90", (long) jvgs::input::KEY_WORLD_90, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_91", (long) jvgs::input::KEY_WORLD_91, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_92", (long) jvgs::input::KEY_WORLD_92, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_93", (long) jvgs::input::KEY_WORLD_93, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_94", (long) jvgs::input::KEY_WORLD_94, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_WORLD_95", (long) jvgs::input::KEY_WORLD_95, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP0", (long) jvgs::input::KEY_KP0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP1", (long) jvgs::input::KEY_KP1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP2", (long) jvgs::input::KEY_KP2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP3", (long) jvgs::input::KEY_KP3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP4", (long) jvgs::input::KEY_KP4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP5", (long) jvgs::input::KEY_KP5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP6", (long) jvgs::input::KEY_KP6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP7", (long) jvgs::input::KEY_KP7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP8", (long) jvgs::input::KEY_KP8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP9", (long) jvgs::input::KEY_KP9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_PERIOD", (long) jvgs::input::KEY_KP_PERIOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_DIVIDE", (long) jvgs::input::KEY_KP_DIVIDE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_MULTIPLY", (long) jvgs::input::KEY_KP_MULTIPLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_MINUS", (long) jvgs::input::KEY_KP_MINUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_PLUS", (long) jvgs::input::KEY_KP_PLUS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_ENTER", (long) jvgs::input::KEY_KP_ENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_KP_EQUALS", (long) jvgs::input::KEY_KP_EQUALS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_UP", (long) jvgs::input::KEY_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_DOWN", (long) jvgs::input::KEY_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RIGHT", (long) jvgs::input::KEY_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LEFT", (long) jvgs::input::KEY_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_INSERT", (long) jvgs::input::KEY_INSERT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_HOME", (long) jvgs::input::KEY_HOME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_END", (long) jvgs::input::KEY_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PAGEUP", (long) jvgs::input::KEY_PAGEUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PAGEDOWN", (long) jvgs::input::KEY_PAGEDOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F1", (long) jvgs::input::KEY_F1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F2", (long) jvgs::input::KEY_F2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F3", (long) jvgs::input::KEY_F3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F4", (long) jvgs::input::KEY_F4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F5", (long) jvgs::input::KEY_F5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F6", (long) jvgs::input::KEY_F6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F7", (long) jvgs::input::KEY_F7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F8", (long) jvgs::input::KEY_F8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F9", (long) jvgs::input::KEY_F9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F10", (long) jvgs::input::KEY_F10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F11", (long) jvgs::input::KEY_F11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F12", (long) jvgs::input::KEY_F12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F13", (long) jvgs::input::KEY_F13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F14", (long) jvgs::input::KEY_F14, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_F15", (long) jvgs::input::KEY_F15, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_NUMLOCK", (long) jvgs::input::KEY_NUMLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_CAPSLOCK", (long) jvgs::input::KEY_CAPSLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SCROLLOCK", (long) jvgs::input::KEY_SCROLLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RSHIFT", (long) jvgs::input::KEY_RSHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LSHIFT", (long) jvgs::input::KEY_LSHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RCTRL", (long) jvgs::input::KEY_RCTRL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LCTRL", (long) jvgs::input::KEY_LCTRL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RALT", (long) jvgs::input::KEY_RALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LALT", (long) jvgs::input::KEY_LALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RMETA", (long) jvgs::input::KEY_RMETA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LMETA", (long) jvgs::input::KEY_LMETA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LSUPER", (long) jvgs::input::KEY_LSUPER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_RSUPER", (long) jvgs::input::KEY_RSUPER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_MODE", (long) jvgs::input::KEY_MODE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_COMPOSE", (long) jvgs::input::KEY_COMPOSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_HELP", (long) jvgs::input::KEY_HELP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_PRINT", (long) jvgs::input::KEY_PRINT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_SYSREQ", (long) jvgs::input::KEY_SYSREQ, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_BREAK", (long) jvgs::input::KEY_BREAK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_MENU", (long) jvgs::input::KEY_MENU, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_POWER", (long) jvgs::input::KEY_POWER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_EURO", (long) jvgs::input::KEY_EURO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_UNDO", (long) jvgs::input::KEY_UNDO, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KEY_LAST", (long) jvgs::input::KEY_LAST, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_LINES", (long) jvgs::video::RENDERTYPE_LINES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_LINE_STRIP", (long) jvgs::video::RENDERTYPE_LINE_STRIP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_LINE_LOOP", (long) jvgs::video::RENDERTYPE_LINE_LOOP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_QUADS", (long) jvgs::video::RENDERTYPE_QUADS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_POLYGON", (long) jvgs::video::RENDERTYPE_POLYGON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"RENDERTYPE_CONCAVE_POLYGON", (long) jvgs::video::RENDERTYPE_CONCAVE_POLYGON, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SKETCHELEMENTTYPE_GROUP", (long) jvgs::sketch::SKETCHELEMENTTYPE_GROUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"SKETCHELEMENTTYPE_PATH", (long) jvgs::sketch::SKETCHELEMENTTYPE_PATH, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_jvgs__math__AffineTransformationMatrixTo_p_jvgs__math__Matrix(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::math::Matrix *)  ((jvgs::math::AffineTransformationMatrix *) x));
}
static void *_p_jvgs__math__LineSegmentTo_p_jvgs__math__PathSegment(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::math::PathSegment *)  ((jvgs::math::LineSegment *) x));
}
static void *_p_jvgs__math__CubicCurveTo_p_jvgs__math__PathSegment(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::math::PathSegment *)  ((jvgs::math::CubicCurve *) x));
}
static void *_p_jvgs__game__CollisionResponseAffectorTo_p_jvgs__game__Affector(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::game::Affector *)  ((jvgs::game::CollisionResponseAffector *) x));
}
static void *_p_jvgs__sketch__RotateTransformCommandTo_p_jvgs__sketch__TransformCommand(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::TransformCommand *)  ((jvgs::sketch::RotateTransformCommand *) x));
}
static void *_p_jvgs__sketch__TransformParserTo_p_jvgs__sketch__TextParser(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::TextParser *)  ((jvgs::sketch::TransformParser *) x));
}
static void *_p_jvgs__sketch__MPathCommandParserTo_p_jvgs__sketch__PathCommandParser(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::PathCommandParser *)  ((jvgs::sketch::MPathCommandParser *) x));
}
static void *_p_jvgs__sketch__LPathCommandParserTo_p_jvgs__sketch__PathCommandParser(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::PathCommandParser *)  ((jvgs::sketch::LPathCommandParser *) x));
}
static void *_p_jvgs__sketch__SPathCommandParserTo_p_jvgs__sketch__PathCommandParser(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::PathCommandParser *)  ((jvgs::sketch::SPathCommandParser *) x));
}
static void *_p_jvgs__sketch__ZPathCommandParserTo_p_jvgs__sketch__PathCommandParser(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::sketch::PathCommandParser *)  ((jvgs::sketch::ZPathCommandParser *) x));
}
static void *_p_jvgs__game__InputAffectorTo_p_jvgs__input__KeyListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((jvgs::input::KeyListener *)  ((jvgs::game::InputAffector *) x));
}
static swig_type_info _swigt__p_BoundingBox = {"_p_BoundingBox", "BoundingBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Color = {"_p_Color", "Color *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Entity = {"_p_Entity", "Entity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GLuint = {"_p_GLuint", "GLuint *|jvgs::video::ListManager::List *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Key = {"_p_Key", "Key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Line = {"_p_Line", "Line *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_List = {"_p_List", "List *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Parser = {"_p_Parser", "Parser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PathDataParser = {"_p_PathDataParser", "PathDataParser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SketchElement = {"_p_SketchElement", "SketchElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SketchElementType = {"_p_SketchElementType", "SketchElementType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TiXmlElement = {"_p_TiXmlElement", "TiXmlElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Vector2D = {"_p_Vector2D", "Vector2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_jvgs__core__LogManager = {"_p_jvgs__core__LogManager", "jvgs::core::LogManager *", 0, 0, (void*)&_wrap_class_jvgs_core_LogManager, 0};
static swig_type_info _swigt__p_jvgs__game__Affector = {"_p_jvgs__game__Affector", "jvgs::game::Affector *", 0, 0, (void*)&_wrap_class_jvgs_game_Affector, 0};
static swig_type_info _swigt__p_jvgs__game__CollisionResponseAffector = {"_p_jvgs__game__CollisionResponseAffector", "jvgs::game::CollisionResponseAffector *", 0, 0, (void*)&_wrap_class_jvgs_game_CollisionResponseAffector, 0};
static swig_type_info _swigt__p_jvgs__game__Entity = {"_p_jvgs__game__Entity", "jvgs::game::Entity *", 0, 0, (void*)&_wrap_class_jvgs_game_Entity, 0};
static swig_type_info _swigt__p_jvgs__game__GravityAffector = {"_p_jvgs__game__GravityAffector", "jvgs::game::GravityAffector *", 0, 0, (void*)&_wrap_class_jvgs_game_GravityAffector, 0};
static swig_type_info _swigt__p_jvgs__game__InputAffector = {"_p_jvgs__game__InputAffector", "jvgs::game::InputAffector *", 0, 0, (void*)&_wrap_class_jvgs_game_InputAffector, 0};
static swig_type_info _swigt__p_jvgs__input__InputManager = {"_p_jvgs__input__InputManager", "jvgs::input::InputManager *", 0, 0, (void*)&_wrap_class_jvgs_input_InputManager, 0};
static swig_type_info _swigt__p_jvgs__input__KeyListener = {"_p_jvgs__input__KeyListener", "jvgs::input::KeyListener *", 0, 0, (void*)&_wrap_class_jvgs_input_KeyListener, 0};
static swig_type_info _swigt__p_jvgs__math__AffineTransformationMatrix = {"_p_jvgs__math__AffineTransformationMatrix", "jvgs::math::AffineTransformationMatrix *", 0, 0, (void*)&_wrap_class_jvgs_math_AffineTransformationMatrix, 0};
static swig_type_info _swigt__p_jvgs__math__BoundingBox = {"_p_jvgs__math__BoundingBox", "jvgs::math::BoundingBox *", 0, 0, (void*)&_wrap_class_jvgs_math_BoundingBox, 0};
static swig_type_info _swigt__p_jvgs__math__CubicCurve = {"_p_jvgs__math__CubicCurve", "jvgs::math::CubicCurve *", 0, 0, (void*)&_wrap_class_jvgs_math_CubicCurve, 0};
static swig_type_info _swigt__p_jvgs__math__Line = {"_p_jvgs__math__Line", "jvgs::math::Line *", 0, 0, (void*)&_wrap_class_jvgs_math_Line, 0};
static swig_type_info _swigt__p_jvgs__math__LineSegment = {"_p_jvgs__math__LineSegment", "jvgs::math::LineSegment *", 0, 0, (void*)&_wrap_class_jvgs_math_LineSegment, 0};
static swig_type_info _swigt__p_jvgs__math__MathManager = {"_p_jvgs__math__MathManager", "jvgs::math::MathManager *", 0, 0, (void*)&_wrap_class_jvgs_math_MathManager, 0};
static swig_type_info _swigt__p_jvgs__math__Matrix = {"_p_jvgs__math__Matrix", "jvgs::math::Matrix *", 0, 0, (void*)&_wrap_class_jvgs_math_Matrix, 0};
static swig_type_info _swigt__p_jvgs__math__Noise = {"_p_jvgs__math__Noise", "jvgs::math::Noise *", 0, 0, (void*)&_wrap_class_jvgs_math_Noise, 0};
static swig_type_info _swigt__p_jvgs__math__PathSegment = {"_p_jvgs__math__PathSegment", "jvgs::math::PathSegment *", 0, 0, (void*)&_wrap_class_jvgs_math_PathSegment, 0};
static swig_type_info _swigt__p_jvgs__math__SegmentQuadTree = {"_p_jvgs__math__SegmentQuadTree", "jvgs::math::SegmentQuadTree *", 0, 0, (void*)&_wrap_class_jvgs_math_SegmentQuadTree, 0};
static swig_type_info _swigt__p_jvgs__math__SegmentQuadTreeNode = {"_p_jvgs__math__SegmentQuadTreeNode", "jvgs::math::SegmentQuadTreeNode *", 0, 0, (void*)&_wrap_class_jvgs_math_SegmentQuadTreeNode, 0};
static swig_type_info _swigt__p_jvgs__math__Vector2D = {"_p_jvgs__math__Vector2D", "jvgs::math::Vector2D *", 0, 0, (void*)&_wrap_class_jvgs_math_Vector2D, 0};
static swig_type_info _swigt__p_jvgs__sketch__CPathCommandParser = {"_p_jvgs__sketch__CPathCommandParser", "jvgs::sketch::CPathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_CPathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__Group = {"_p_jvgs__sketch__Group", "jvgs::sketch::Group *", 0, 0, (void*)&_wrap_class_jvgs_sketch_Group, 0};
static swig_type_info _swigt__p_jvgs__sketch__GroupParser = {"_p_jvgs__sketch__GroupParser", "jvgs::sketch::GroupParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_GroupParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__LPathCommandParser = {"_p_jvgs__sketch__LPathCommandParser", "jvgs::sketch::LPathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_LPathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__MPathCommandParser = {"_p_jvgs__sketch__MPathCommandParser", "jvgs::sketch::MPathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_MPathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__MatrixTransformCommand = {"_p_jvgs__sketch__MatrixTransformCommand", "jvgs::sketch::MatrixTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_MatrixTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__Parser = {"_p_jvgs__sketch__Parser", "jvgs::sketch::Parser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_Parser, 0};
static swig_type_info _swigt__p_jvgs__sketch__Path = {"_p_jvgs__sketch__Path", "jvgs::sketch::Path *", 0, 0, (void*)&_wrap_class_jvgs_sketch_Path, 0};
static swig_type_info _swigt__p_jvgs__sketch__PathCommandParser = {"_p_jvgs__sketch__PathCommandParser", "jvgs::sketch::PathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_PathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__PathComponent = {"_p_jvgs__sketch__PathComponent", "jvgs::sketch::PathComponent *", 0, 0, (void*)&_wrap_class_jvgs_sketch_PathComponent, 0};
static swig_type_info _swigt__p_jvgs__sketch__PathDataParser = {"_p_jvgs__sketch__PathDataParser", "jvgs::sketch::PathDataParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_PathDataParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__PathParser = {"_p_jvgs__sketch__PathParser", "jvgs::sketch::PathParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_PathParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__RotateTransformCommand = {"_p_jvgs__sketch__RotateTransformCommand", "jvgs::sketch::RotateTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_RotateTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__SPathCommandParser = {"_p_jvgs__sketch__SPathCommandParser", "jvgs::sketch::SPathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SPathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__ScaleTransformCommand = {"_p_jvgs__sketch__ScaleTransformCommand", "jvgs::sketch::ScaleTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_ScaleTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__Sketch = {"_p_jvgs__sketch__Sketch", "jvgs::sketch::Sketch *", 0, 0, (void*)&_wrap_class_jvgs_sketch_Sketch, 0};
static swig_type_info _swigt__p_jvgs__sketch__SketchElement = {"_p_jvgs__sketch__SketchElement", "jvgs::sketch::SketchElement *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SketchElement, 0};
static swig_type_info _swigt__p_jvgs__sketch__SketchElementParser = {"_p_jvgs__sketch__SketchElementParser", "jvgs::sketch::SketchElementParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SketchElementParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__SketchElementRenderer = {"_p_jvgs__sketch__SketchElementRenderer", "jvgs::sketch::SketchElementRenderer *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SketchElementRenderer, 0};
static swig_type_info _swigt__p_jvgs__sketch__SkewXTransformCommand = {"_p_jvgs__sketch__SkewXTransformCommand", "jvgs::sketch::SkewXTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SkewXTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__SkewYTransformCommand = {"_p_jvgs__sketch__SkewYTransformCommand", "jvgs::sketch::SkewYTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_SkewYTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__TextParser = {"_p_jvgs__sketch__TextParser", "jvgs::sketch::TextParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_TextParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__TransformCommand = {"_p_jvgs__sketch__TransformCommand", "jvgs::sketch::TransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_TransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__TransformParser = {"_p_jvgs__sketch__TransformParser", "jvgs::sketch::TransformParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_TransformParser, 0};
static swig_type_info _swigt__p_jvgs__sketch__TranslateTransformCommand = {"_p_jvgs__sketch__TranslateTransformCommand", "jvgs::sketch::TranslateTransformCommand *", 0, 0, (void*)&_wrap_class_jvgs_sketch_TranslateTransformCommand, 0};
static swig_type_info _swigt__p_jvgs__sketch__ZPathCommandParser = {"_p_jvgs__sketch__ZPathCommandParser", "jvgs::sketch::ZPathCommandParser *", 0, 0, (void*)&_wrap_class_jvgs_sketch_ZPathCommandParser, 0};
static swig_type_info _swigt__p_jvgs__video__Color = {"_p_jvgs__video__Color", "jvgs::video::Color *", 0, 0, (void*)&_wrap_class_jvgs_video_Color, 0};
static swig_type_info _swigt__p_jvgs__video__ListManager = {"_p_jvgs__video__ListManager", "jvgs::video::ListManager *", 0, 0, (void*)&_wrap_class_jvgs_video_ListManager, 0};
static swig_type_info _swigt__p_jvgs__video__Renderer = {"_p_jvgs__video__Renderer", "jvgs::video::Renderer *", 0, 0, (void*)&_wrap_class_jvgs_video_Renderer, 0};
static swig_type_info _swigt__p_jvgs__video__VideoManager = {"_p_jvgs__video__VideoManager", "jvgs::video::VideoManager *", 0, 0, (void*)&_wrap_class_jvgs_video_VideoManager, 0};
static swig_type_info _swigt__p_math__AffineTransformationMatrix = {"_p_math__AffineTransformationMatrix", "math::AffineTransformationMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__LineSegment = {"_p_math__LineSegment", "math::LineSegment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_math__Vector2D = {"_p_math__Vector2D", "math::Vector2D *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sketch__Sketch = {"_p_sketch__Sketch", "sketch::Sketch *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_std_string, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_jvgs__math__LineSegment_p_t = {"_p_std__vectorT_jvgs__math__LineSegment_p_t", "std::vector< jvgs::math::LineSegment * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_BoundingBox,
  &_swigt__p_Color,
  &_swigt__p_Entity,
  &_swigt__p_GLuint,
  &_swigt__p_Key,
  &_swigt__p_Line,
  &_swigt__p_List,
  &_swigt__p_Parser,
  &_swigt__p_PathDataParser,
  &_swigt__p_SketchElement,
  &_swigt__p_SketchElementType,
  &_swigt__p_TiXmlElement,
  &_swigt__p_Vector2D,
  &_swigt__p_float,
  &_swigt__p_jvgs__core__LogManager,
  &_swigt__p_jvgs__game__Affector,
  &_swigt__p_jvgs__game__CollisionResponseAffector,
  &_swigt__p_jvgs__game__Entity,
  &_swigt__p_jvgs__game__GravityAffector,
  &_swigt__p_jvgs__game__InputAffector,
  &_swigt__p_jvgs__input__InputManager,
  &_swigt__p_jvgs__input__KeyListener,
  &_swigt__p_jvgs__math__AffineTransformationMatrix,
  &_swigt__p_jvgs__math__BoundingBox,
  &_swigt__p_jvgs__math__CubicCurve,
  &_swigt__p_jvgs__math__Line,
  &_swigt__p_jvgs__math__LineSegment,
  &_swigt__p_jvgs__math__MathManager,
  &_swigt__p_jvgs__math__Matrix,
  &_swigt__p_jvgs__math__Noise,
  &_swigt__p_jvgs__math__PathSegment,
  &_swigt__p_jvgs__math__SegmentQuadTree,
  &_swigt__p_jvgs__math__SegmentQuadTreeNode,
  &_swigt__p_jvgs__math__Vector2D,
  &_swigt__p_jvgs__sketch__CPathCommandParser,
  &_swigt__p_jvgs__sketch__Group,
  &_swigt__p_jvgs__sketch__GroupParser,
  &_swigt__p_jvgs__sketch__LPathCommandParser,
  &_swigt__p_jvgs__sketch__MPathCommandParser,
  &_swigt__p_jvgs__sketch__MatrixTransformCommand,
  &_swigt__p_jvgs__sketch__Parser,
  &_swigt__p_jvgs__sketch__Path,
  &_swigt__p_jvgs__sketch__PathCommandParser,
  &_swigt__p_jvgs__sketch__PathComponent,
  &_swigt__p_jvgs__sketch__PathDataParser,
  &_swigt__p_jvgs__sketch__PathParser,
  &_swigt__p_jvgs__sketch__RotateTransformCommand,
  &_swigt__p_jvgs__sketch__SPathCommandParser,
  &_swigt__p_jvgs__sketch__ScaleTransformCommand,
  &_swigt__p_jvgs__sketch__Sketch,
  &_swigt__p_jvgs__sketch__SketchElement,
  &_swigt__p_jvgs__sketch__SketchElementParser,
  &_swigt__p_jvgs__sketch__SketchElementRenderer,
  &_swigt__p_jvgs__sketch__SkewXTransformCommand,
  &_swigt__p_jvgs__sketch__SkewYTransformCommand,
  &_swigt__p_jvgs__sketch__TextParser,
  &_swigt__p_jvgs__sketch__TransformCommand,
  &_swigt__p_jvgs__sketch__TransformParser,
  &_swigt__p_jvgs__sketch__TranslateTransformCommand,
  &_swigt__p_jvgs__sketch__ZPathCommandParser,
  &_swigt__p_jvgs__video__Color,
  &_swigt__p_jvgs__video__ListManager,
  &_swigt__p_jvgs__video__Renderer,
  &_swigt__p_jvgs__video__VideoManager,
  &_swigt__p_math__AffineTransformationMatrix,
  &_swigt__p_math__LineSegment,
  &_swigt__p_math__Vector2D,
  &_swigt__p_sketch__Sketch,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_jvgs__math__LineSegment_p_t,
  &_swigt__p_std__vectorT_std__string_t,
};

static swig_cast_info _swigc__p_BoundingBox[] = {  {&_swigt__p_BoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Color[] = {  {&_swigt__p_Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Entity[] = {  {&_swigt__p_Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GLuint[] = {  {&_swigt__p_GLuint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Key[] = {  {&_swigt__p_Key, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Line[] = {  {&_swigt__p_Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_List[] = {  {&_swigt__p_List, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Parser[] = {  {&_swigt__p_Parser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PathDataParser[] = {  {&_swigt__p_PathDataParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SketchElement[] = {  {&_swigt__p_SketchElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SketchElementType[] = {  {&_swigt__p_SketchElementType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TiXmlElement[] = {  {&_swigt__p_TiXmlElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Vector2D[] = {  {&_swigt__p_Vector2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__core__LogManager[] = {  {&_swigt__p_jvgs__core__LogManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__game__Affector[] = {  {&_swigt__p_jvgs__game__Affector, 0, 0, 0},  {&_swigt__p_jvgs__game__CollisionResponseAffector, _p_jvgs__game__CollisionResponseAffectorTo_p_jvgs__game__Affector, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__game__CollisionResponseAffector[] = {  {&_swigt__p_jvgs__game__CollisionResponseAffector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__game__Entity[] = {  {&_swigt__p_jvgs__game__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__game__GravityAffector[] = {  {&_swigt__p_jvgs__game__GravityAffector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__game__InputAffector[] = {  {&_swigt__p_jvgs__game__InputAffector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__input__InputManager[] = {  {&_swigt__p_jvgs__input__InputManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__input__KeyListener[] = {  {&_swigt__p_jvgs__input__KeyListener, 0, 0, 0},  {&_swigt__p_jvgs__game__InputAffector, _p_jvgs__game__InputAffectorTo_p_jvgs__input__KeyListener, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__AffineTransformationMatrix[] = {  {&_swigt__p_jvgs__math__AffineTransformationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__BoundingBox[] = {  {&_swigt__p_jvgs__math__BoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__CubicCurve[] = {  {&_swigt__p_jvgs__math__CubicCurve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__Line[] = {  {&_swigt__p_jvgs__math__Line, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__LineSegment[] = {  {&_swigt__p_jvgs__math__LineSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__MathManager[] = {  {&_swigt__p_jvgs__math__MathManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__Matrix[] = {  {&_swigt__p_jvgs__math__AffineTransformationMatrix, _p_jvgs__math__AffineTransformationMatrixTo_p_jvgs__math__Matrix, 0, 0},  {&_swigt__p_jvgs__math__Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__Noise[] = {  {&_swigt__p_jvgs__math__Noise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__PathSegment[] = {  {&_swigt__p_jvgs__math__PathSegment, 0, 0, 0},  {&_swigt__p_jvgs__math__LineSegment, _p_jvgs__math__LineSegmentTo_p_jvgs__math__PathSegment, 0, 0},  {&_swigt__p_jvgs__math__CubicCurve, _p_jvgs__math__CubicCurveTo_p_jvgs__math__PathSegment, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__SegmentQuadTree[] = {  {&_swigt__p_jvgs__math__SegmentQuadTree, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__SegmentQuadTreeNode[] = {  {&_swigt__p_jvgs__math__SegmentQuadTreeNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__math__Vector2D[] = {  {&_swigt__p_jvgs__math__Vector2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__CPathCommandParser[] = {  {&_swigt__p_jvgs__sketch__CPathCommandParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__Group[] = {  {&_swigt__p_jvgs__sketch__Group, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__GroupParser[] = {  {&_swigt__p_jvgs__sketch__GroupParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__LPathCommandParser[] = {  {&_swigt__p_jvgs__sketch__LPathCommandParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__MPathCommandParser[] = {  {&_swigt__p_jvgs__sketch__MPathCommandParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__MatrixTransformCommand[] = {  {&_swigt__p_jvgs__sketch__MatrixTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__Parser[] = {  {&_swigt__p_jvgs__sketch__Parser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__Path[] = {  {&_swigt__p_jvgs__sketch__Path, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__PathCommandParser[] = {  {&_swigt__p_jvgs__sketch__PathCommandParser, 0, 0, 0},  {&_swigt__p_jvgs__sketch__MPathCommandParser, _p_jvgs__sketch__MPathCommandParserTo_p_jvgs__sketch__PathCommandParser, 0, 0},  {&_swigt__p_jvgs__sketch__LPathCommandParser, _p_jvgs__sketch__LPathCommandParserTo_p_jvgs__sketch__PathCommandParser, 0, 0},  {&_swigt__p_jvgs__sketch__SPathCommandParser, _p_jvgs__sketch__SPathCommandParserTo_p_jvgs__sketch__PathCommandParser, 0, 0},  {&_swigt__p_jvgs__sketch__ZPathCommandParser, _p_jvgs__sketch__ZPathCommandParserTo_p_jvgs__sketch__PathCommandParser, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__PathComponent[] = {  {&_swigt__p_jvgs__sketch__PathComponent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__PathDataParser[] = {  {&_swigt__p_jvgs__sketch__PathDataParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__PathParser[] = {  {&_swigt__p_jvgs__sketch__PathParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__RotateTransformCommand[] = {  {&_swigt__p_jvgs__sketch__RotateTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SPathCommandParser[] = {  {&_swigt__p_jvgs__sketch__SPathCommandParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__ScaleTransformCommand[] = {  {&_swigt__p_jvgs__sketch__ScaleTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__Sketch[] = {  {&_swigt__p_jvgs__sketch__Sketch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SketchElement[] = {  {&_swigt__p_jvgs__sketch__SketchElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SketchElementParser[] = {  {&_swigt__p_jvgs__sketch__SketchElementParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SketchElementRenderer[] = {  {&_swigt__p_jvgs__sketch__SketchElementRenderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SkewXTransformCommand[] = {  {&_swigt__p_jvgs__sketch__SkewXTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__SkewYTransformCommand[] = {  {&_swigt__p_jvgs__sketch__SkewYTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__TextParser[] = {  {&_swigt__p_jvgs__sketch__TextParser, 0, 0, 0},  {&_swigt__p_jvgs__sketch__TransformParser, _p_jvgs__sketch__TransformParserTo_p_jvgs__sketch__TextParser, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__TransformCommand[] = {  {&_swigt__p_jvgs__sketch__TransformCommand, 0, 0, 0},  {&_swigt__p_jvgs__sketch__RotateTransformCommand, _p_jvgs__sketch__RotateTransformCommandTo_p_jvgs__sketch__TransformCommand, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__TransformParser[] = {  {&_swigt__p_jvgs__sketch__TransformParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__TranslateTransformCommand[] = {  {&_swigt__p_jvgs__sketch__TranslateTransformCommand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__sketch__ZPathCommandParser[] = {  {&_swigt__p_jvgs__sketch__ZPathCommandParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__video__Color[] = {  {&_swigt__p_jvgs__video__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__video__ListManager[] = {  {&_swigt__p_jvgs__video__ListManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__video__Renderer[] = {  {&_swigt__p_jvgs__video__Renderer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_jvgs__video__VideoManager[] = {  {&_swigt__p_jvgs__video__VideoManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__AffineTransformationMatrix[] = {  {&_swigt__p_math__AffineTransformationMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__LineSegment[] = {  {&_swigt__p_math__LineSegment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_math__Vector2D[] = {  {&_swigt__p_math__Vector2D, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sketch__Sketch[] = {  {&_swigt__p_sketch__Sketch, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_jvgs__math__LineSegment_p_t[] = {  {&_swigt__p_std__vectorT_jvgs__math__LineSegment_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_BoundingBox,
  _swigc__p_Color,
  _swigc__p_Entity,
  _swigc__p_GLuint,
  _swigc__p_Key,
  _swigc__p_Line,
  _swigc__p_List,
  _swigc__p_Parser,
  _swigc__p_PathDataParser,
  _swigc__p_SketchElement,
  _swigc__p_SketchElementType,
  _swigc__p_TiXmlElement,
  _swigc__p_Vector2D,
  _swigc__p_float,
  _swigc__p_jvgs__core__LogManager,
  _swigc__p_jvgs__game__Affector,
  _swigc__p_jvgs__game__CollisionResponseAffector,
  _swigc__p_jvgs__game__Entity,
  _swigc__p_jvgs__game__GravityAffector,
  _swigc__p_jvgs__game__InputAffector,
  _swigc__p_jvgs__input__InputManager,
  _swigc__p_jvgs__input__KeyListener,
  _swigc__p_jvgs__math__AffineTransformationMatrix,
  _swigc__p_jvgs__math__BoundingBox,
  _swigc__p_jvgs__math__CubicCurve,
  _swigc__p_jvgs__math__Line,
  _swigc__p_jvgs__math__LineSegment,
  _swigc__p_jvgs__math__MathManager,
  _swigc__p_jvgs__math__Matrix,
  _swigc__p_jvgs__math__Noise,
  _swigc__p_jvgs__math__PathSegment,
  _swigc__p_jvgs__math__SegmentQuadTree,
  _swigc__p_jvgs__math__SegmentQuadTreeNode,
  _swigc__p_jvgs__math__Vector2D,
  _swigc__p_jvgs__sketch__CPathCommandParser,
  _swigc__p_jvgs__sketch__Group,
  _swigc__p_jvgs__sketch__GroupParser,
  _swigc__p_jvgs__sketch__LPathCommandParser,
  _swigc__p_jvgs__sketch__MPathCommandParser,
  _swigc__p_jvgs__sketch__MatrixTransformCommand,
  _swigc__p_jvgs__sketch__Parser,
  _swigc__p_jvgs__sketch__Path,
  _swigc__p_jvgs__sketch__PathCommandParser,
  _swigc__p_jvgs__sketch__PathComponent,
  _swigc__p_jvgs__sketch__PathDataParser,
  _swigc__p_jvgs__sketch__PathParser,
  _swigc__p_jvgs__sketch__RotateTransformCommand,
  _swigc__p_jvgs__sketch__SPathCommandParser,
  _swigc__p_jvgs__sketch__ScaleTransformCommand,
  _swigc__p_jvgs__sketch__Sketch,
  _swigc__p_jvgs__sketch__SketchElement,
  _swigc__p_jvgs__sketch__SketchElementParser,
  _swigc__p_jvgs__sketch__SketchElementRenderer,
  _swigc__p_jvgs__sketch__SkewXTransformCommand,
  _swigc__p_jvgs__sketch__SkewYTransformCommand,
  _swigc__p_jvgs__sketch__TextParser,
  _swigc__p_jvgs__sketch__TransformCommand,
  _swigc__p_jvgs__sketch__TransformParser,
  _swigc__p_jvgs__sketch__TranslateTransformCommand,
  _swigc__p_jvgs__sketch__ZPathCommandParser,
  _swigc__p_jvgs__video__Color,
  _swigc__p_jvgs__video__ListManager,
  _swigc__p_jvgs__video__Renderer,
  _swigc__p_jvgs__video__VideoManager,
  _swigc__p_math__AffineTransformationMatrix,
  _swigc__p_math__LineSegment,
  _swigc__p_math__Vector2D,
  _swigc__p_sketch__Sketch,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_jvgs__math__LineSegment_p_t,
  _swigc__p_std__vectorT_std__string_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

